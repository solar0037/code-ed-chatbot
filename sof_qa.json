[{"type": 0, "title": "ImportError: No module named 'selenium'", "question": "\nI'm trying to write a script to check a website. It's the first time I'm using selenium. I'm trying to run the script on a OSX system. Although I checked in /Library/Python/2.7/site-packages and selenium-2.46.0-py2.7.egg is present, when I run the script it keeps telling me that there is no selenium module to import.\nThis is the log that I get when I run my code:\n\n", "answers": ["\nIf you have pip installed you can install selenium like so.\npip install selenium\nor depending on your permissions:\nsudo pip install selenium\nFor python3:\nsudo pip3 install selenium\nAs you can see from this question pip vs easy_install pip is a more reliable package installer as it was built to improve easy_install.\nI would also suggest that when creating new projects you do so in virtual environments, even a simple selenium project. You can read more about virtual environments here. In fact pip is included out of the box with virtualenv!\n", "\nFor python3, on a Mac you must use pip3 to install selenium.\nsudo pip3 install selenium\n\n", "\nI had the exact same problem and it was driving me crazy (Windows 10 and VS Code 1.49.1)\nOther answers talk about installing Selenium, but it's clear to me that you've already did that, but you still get the ImportError: No module named 'selenium'.\nSo, what's going on?\nTwo things:\n\nYou installed Selenium in this folder /Library/Python/2.7/site-packages and selenium-2.46.0-py2.7.egg\nBut you're probably running a version of Python, in which you didn't install Selenium. For instance: /Library/Python/3.8/site-packages... you won't find Selenium installed here and that's why the module isn't found.\n\nThe solution?\nYou have to install selenium in the same directory to the Python version you're using or change the interpreter to match the directory where Selenium is installed.\nIn VS Code you change the interpreter here (at the bottom left corner of the screen)\n\nReady! Now your Python interpreter should find the module.\n", "\nIt's 2020 now, use python3 consistently\n\npip3 install selenium\npython3 xxx.py\n\nI meet the same problem when I install selenium using pip3, but run scripts using  python.\n", "\nIf you are using Anaconda or Spyder in windows, install selenium by this code in cmd:\nconda install selenium\n\nIf you are using Pycharm IDE in windows, install selenium by this code in cmd:\npip install selenium\n\n", "\nI had the same problem. Using sudo python3 -m pip install selenium may work.\n", "\nYour IDE might be pointing to a different installation of Python than where Selenium is installed.\nI'm using Eclipse and when I ran 'quick auto-configure' under:\nPreferences > PyDev > Interpreters > Python Interpreter\nit pointed to a different version of Python than where pip or easy_install actually installed it.\nSelenium worked from the Terminal so I determined which version of python my Terminal was using by running this:\npython -c \"import sys; print(sys.path)\"\n\nthen had Eclipse point to that same location, which for me on my 10.11 Mac was here:\n/Library/Frameworks/Python.framework/Versions/Current/bin/python2.7/\nYou can run \"Advanced Auto-Config\" as well to see all of the installed versions of python and select the one you want to use.  When I selected that same location using \"Advanced Auto-Config\" it finally showed me the Selenium folder as it went through the configuration steps.\n", "\nIf pip isn\u2019t already installed, then first try to bootstrap it from the standard library:\nsudo python -m ensurepip --default-pip\n\nEnsure pip, setuptools, and wheel are up to date\nsudo python -m pip install --upgrade pip setuptools wheel\n\nNow Install Selenium\nsudo pip install selenium\n\nNow run your runner. \nHope this helps. Happy Coding !!\n", "\nEven though the egg file may be present, that does not necessarily mean that it is installed. Check out this previous answer for some hint:\nHow to install Selenium WebDriver on Mac OS\n", "\nI ran into the same problem with pycharm where my modules wouldn't import after installing them on ubuntu with pip.\nIf you go File-> Settings -> Project > Python Interpreter\nYou can click the '+' on the right hand side and import modules into the interpreter.\nNot sure if that's your issue but hope this helps.\n", "\nI had a similar problem.\nIt turned out that I had an alias defined for python like so:\nalias python=/usr/bin/python3\n\nApparently virtualenv does not check or update your aliases.\nSo the solution for me was to remove the alias:\nunalias python\nNow when I run python, I get the one from the virtual environment.\nProblem solved.\n", "\nmake easy install again by downloading selenium webdriver from its website it is not installed properly.\nEdit 1:\nextract the .tar.gz folder go inside the directory and run python setup.py install from terminal.make sure you have installed setuptools.\n", "\nNavigate to your scripts folder in Python directory (C:\\Python27\\Scripts) and open command line there (Hold shift and right click then select open command window here). Run pip install -U selenium\nIf you don't have pip installed, go ahead and install pip first \n", "\npip3 install selenium\n\nTry this if you have python3.\n", "\ninstall urllib3\n!pip3 install urllib3\n\nimport urllib3\n\nthan install it \n!pip3 install selenium\n\nimport selenium\n\n", "\nfirst you should be sure that selenium is installed in your system.\nthen install pycharm https://itsfoss.com/install-pycharm-ubuntu/\nnow if an of packages are not installed it will show red underlines. click on it and install from pycharm. \nlike for this case click on selenium option in import statement, there you would getting some options. click on install selenium. it will install and automatically run the code successfully if all your drivers are placed in proper directories.\n", "\nWindows: \npip install selenium\n\nUnix:\nsudo pip install selenium\n\n", "\nWhile pip install might work. Please check the project structure and see if there is no virtual environment already (It is a good practice to have one) created in the project. If there is, activate it with source <name_of_virtual_env>/bin/activate (for MacOS) and venv\\Scripts\\Activate.ps1 (for Windows powershell) or venv\\Scripts\\activate.bat (for Windows cmd). then pip install selenium into the environment.\nIf it isn't,\ncheck if you have a virtual environment with virtualenv --version\nIf it displays an error, install it with pip install virtualenv\nthen create a virtual environment with\nvirtualenv <name_of_virtual_env> (Both Windows and MacOS)or\npython -m venv <name_of_virtual_env> (Windows Only)\nthen activate the virtual environment\nwith\nsource <name_of_virtual_env>/bin/activate (for MacOS) and\nvenv\\Scripts\\Activate.ps1 (for Windows powershell) or\nvenv\\Scripts\\activate.bat (for Windows cmd).\nthen install selenium with pip install -U selenium (it will install the latest version).\nIf it doesn't display an error, just create a virtual environment in the project, activate it and install selenium inside of it.\n", "\nI was having the same issue when using python 3 with conda distribution, trying to run code on Jupyter in a custom virtualenv.\nI tried manually installing, installing with pip3, conda etc in anaconda prompt repeatedly but continued to get the import error.\nFinally solved it by installing it in the Jupyter Tab itself.\nin Jupyter, in a line, run conda install selenium\nThat's it\n(If you're facing a similar env that is)\n", "\nI had same issue and tried all that are mentioned above but none work for me until I saw py -m pip install -U selenium\n"]}, {"type": 0, "title": "How to solve No module named 'selenium' in VS code?", "question": "\nHow to solve No module named 'selenium' in VS code?\nModule to be used\n\nHowever, the following error occurred.\nModuleNotFoundError: No module named 'selenium'\nI tried in VS code to solve this error.\nA similar situation with me, stack overflow the resolution, but failed.\n-> ImportError: No module named 'selenium'\n\n\n-> select Python 3.8.5 -64bit(conda)\n\ncomment update(programandoconro)\n\n-> An error still occurs.\ncomment update(Prophet)\n\n-> An error still occurs.\n", "answers": ["\nBoth answers above might work but it is better to create a virtual environment and install your dependencies in there. Since you're already using Anaconda, I'll list the steps below.\nYou can create a virtual environment with Anaconda:\n\nconda create -n yourenvname python=x.x anaconda\nsource activate yourenvname\n\nYou can find more info how to setup your environment here\n", "\nPlease try python3 -m pip install selenium.\nThis will allow you to use the current active version of Python you are using.\nUpdate:\nI saw that you are using an .ipynb extension. I am not an expert in those kind of environments but I would try to run !python3 -m pip install selenium inside the file (not the terminal). This only the first time, then you can comment that line. Please try that.\n", "\nYou're might run a virtual environment and installed selenium in your default python environment. If so try to install it into the local one.\n", "\nBest Solution: Worked for me.\nIssue: The version of python you are using does not have \"Selenium\" in its root folder. If you are using python 3.8 for instance, you are missing Selenium in \"Lib\\site-packages\" directory.\n\nGo to your C:\\ drive and locate all your Python folders (python version #s)\nIn each folder go to \"Lib\\site-packages\" and see if you have \"Selenium\" installed.\nIf its in the folder of python version that you are not using, just copy the folders in the correct python version folder in \"Lib\\site-packages\" path.\n\nThis should do it....\n", "\nIf you already installed Selenium by pip install selenium or by any other way and still see that error I guess you are missing a system PATH set to Python or Selenium folder in your machine.\nSo just add those folders locations to you machine PATH as described here or any other place.\n"]}, {"type": 0, "title": "ModuleNotFoundError: No module named 'selenium'", "question": "\nI get an error while running this selenium script. Please suggest what can be done to fix this:\nScript:\n\nError:\n\nI have installed Python 3.6 on win 7 Professional 32 bit. I have Selenium Standalone Server version 3.4.0(link)\n", "answers": ["\nTry installing selenium using pip. Use the following command.\npython -m pip install -U selenium\n\n", "\nSeems like you have not run the installation command for webdriver_manager.\nUse the following command: \npip install webdriver_manager\n\nBut before this, make sure you have properly installed selenium as well. If not, use the following command to install selenium:\npip install selenium\n\n", "\nRemarks to virtual environments\nvirtualenv\nIf you are using a virtual environment like virtualenv. \nYou have to make sure that the module selenium is installed \n1.) in the virtual environment and \n2.) in the default settings (when the virtual environment is deactivated).\n\nOtherwise you will get the error message: \nModuleNotFoundError: No module named 'selenium'\nExample\nInstall selenium in the default settings: pip install selenium\nCreate virtual environment (on windows): py -m virtualenv folder_env\nActivate virtual environment (on windows): source folder_env/Scripts/activate\nCheck virtual environment settings: which python and which pip\nInstall selenium: pip install selenium\nCheck pip list for selenium: pip list\n(Optional) Exit virtual environment: deactivate folder_env\nMiscellaneous\nVirtualenv by Corey Schafer: https://www.youtube.com/watch?v=N5vscPTWKOk \nvirtualenv is not a native module, you have to install it with\npip install virtualenv\n", "\n\ndriver = webdriver.chrome(\"\")\n\nthere is no such class ^^.  It is named webdriver.Chrome()\n", "\nOkay, the Quick and Easy Solution is to Go to Your Python Version Location, Then Libs, and then Site-packages.\nex - \nC:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python38\\Lib\\site-packages\nTry Deleting and Reinstalling Selenium, and Try Running the Code.\n\n", "\n\nYou can enter these commands \"pip install webdriver_manager\"\nThen \"pip install selenium\"\n\n", "\nIf Webdriver Manager is not installed, open CMD -> Type \"pip install webdriver_manager\" and enter.\nIf you found such an issue, then in Pycharm specific application:\n\nFind path where your Python library exists. (Like C:\\Users\\cp\\AppData\\Local\\Programs\\Python\\Python38-32\\Lib\\site-packages)\nCopy site-packages folder.\nGo to Project.\nFind \"Lib\" folder.\nExpand Lib folder and you will find site_packages over there.\nPaste site-packages.\n\nI believe it will help you out.\n", "\nLate answer but it is worth mentioning.\nWorking on VSCode under Windows and I had this issue ModuleNotFoundError: No module named 'selenium', none of the solutions worked for me.\nFinally, I figured out  that Python was installed twice:\n\nFrom the Windows store which will reside under : C:\\Users\\<user>\\AppData\\Local\\Microsoft\\Python\n\nNormal Install (i.e. download and install in a chosen directory, mine was C:\\Users\\<user>\\AppData\\Local\\Programs\\Python)\n\n\nWhat drove me crazy was when I open the terminal and run :\n\npip list\n\nI found the selenium there, and it keeps telling me on the other hand : No module named 'selenium'\nAnd it appears that VsCode launcher (button to execute my .py file) was bound, somehow, to the former location (the one downloaded from the store) while its terminal was linked to the latter one, so I uninstall it (the one from Windows Store) and selected the proper location of Python in the launcher's config in VsCode and it worked.\n"]}, {"type": 0, "title": "\"ImportError: No module named selenium\" on VSCode", "question": "\nI'm making a project with selenium, and the following error is disturbing me. I'm using VSCode with Code Runner, and my OS is Ubuntu 20.04:\n\nI have installed Firefox geckodriver on github, and I have put geckodriver to my PATH in /usr/bin and in /usr/local/bin using \"sudo cp /geckodriver/path /usr/bin\". I have already done \"pip3 install selenium\".\nWhat is really weird is that if I go to Terminal, and run \"python3 name_of_file.py\", it works. I have searched a lot, and I didn't found anything about it. I also tested on IDLE IDE, and it worked fine.\n", "answers": ["\nTry this answer of Raj Dhaker\nUninstall Selenium using pip uninstall selenium\nThen create a New Folder on your preferred location, (Like Desktop, or D drive, etc.)\nOpen that folder in Visual Studio Code.\nNow go to the Terminal of VS Code and create a Virtual Environment (Google python Virtual Environment if you don't know how to create one)\nThen, install selenium in that virtual Environment using pip install selenium\nYou will see some files are included in your folder after pip install selenium (pipfile and pipfile.lok)\nLastly, install pyLint to your virtual environment using pipenv install pylint --dev\n"]}, {"type": 0, "title": "Python: ImportError: No module named Selenium Windows", "question": "\nI am using python 3.6 on windows10. I created a virtual environment with:\n\nThen I installed a few packages and also installed selenium with the command:\n\nHowever when I import selenium, I get an error saying:\n\nwhen I run the script in cmd. But when I run the same code in VSCode, it gives no errors.\nI am unable to understand the reason behind this. Also, I tried uninstalling and installing the whole environment again. No changes observed. \nNote: I am planning to deploy this project to Heroku. So please give any suggestions you think would be necessary to do when deploying to Heroku.\n", "answers": ["\nTo install selenium    \nC:\\Automation\\DevelopBranch> pip install selenium\n\nCan you please check Selenium is installed. \nC:\\Automation\\DevelopBranch>pip freeze\nselenium==3.141.0\nurllib3==1.25.6\nYou are using pip version 9.0.1, however version 20.0.2 is available.\nYou should consider upgrading via the 'python -m pip install --upgrade pip' comm\nand.\n\nCode: \nfrom selenium import webdriver:\ndriver = webdriver.Chrome(executable_path=r\"path of chromedriver.exe\")\ndriver.maximize_window()\nwait = WebDriverWait(driver, 20)\ndriver.get(\"https://www.google.com\")\n\n", "\nI am very sorry for this... but it just worked by running it with:\npython main.py\n\n"]}, {"type": 0, "title": "ModuleNotFoundError: No module named 'selenium' on Vs code", "question": "\nI get this error when trying to run:\nimport selenium\nfrom selenium import webdriver\nI searched for a while and it seems to be an issue with the interpreter in the virtual env, cuz Selenium is indeed installed in the .venv\\lib folder, however, so far I was not able to find any solution for it.\nI am using\n\nVs code\nWSL2\npython 3.9.7 (interpreter in VS code)\n\n", "answers": []}, {"type": 0, "title": "ImportError: No module named 'selenium' error in my script", "question": "\nThis is the first time I have tried to use selenium. When I try to run my script on windows, I get this error:\n\n", "answers": ["\nYou must install Selenium. Open the command prompt and run the following command to install selenium:\npip install selenium\n"]}, {"type": 0, "title": "Why does Spyder say \"ModuleNotFoundError: No module named 'selenium'\"?", "question": "\nI am trying to run some selenium code in Spyder but I get the following error:\n\nAny ideas as to why this may be?.\n", "answers": ["\n\nInstall Anaconda.\n\nOpen 'Anaconda Prompt' as administrator.\n\nType the following:\nconda install -c conda-forge selenium\n\n\n"]}, {"type": 1, "title": "ChromeDriver Error: 'chromedriver' executable needs to be in PATH [duplicate]", "question": "\n\n\n\n\n\n\nThis question already has answers here:\n                        \n                    \n\n\n\nError message: \"'chromedriver' executable needs to be available in the path\"\n\n                                (30 answers)\n                            \n\nClosed last year.\n\n\n\nI'm trying to use selenium with Python to click a button on an HTML web page.Whenever I run the code, I get the following error:\n\nI'm trying to click the \"Play\" button on this website: https://podcasts.apple.com/us/podcast/python-at-the-us-federal-election-commission/id979020229?i=1000522628049\nCode:\n\n", "answers": ["\nFrom the error 'chromedriver' executable needs to be in PATH it seems like your chromedriver is not in the PATH environment variables. based on your OS check if chromedriver path exists in environment path variable.\nThen try with below code: raw string with complete path of .exe of chromedriver.\nfrom selenium import webdriver\n\ndriver = webdriver.Chrome(executable_path=r'C:\\Users\\Desktop\\chromedriver_win64\\chromedriver.exe') # complete path with .exe\ndriver.get('https://www.google.com')\n\n", "\nSince you're using Windows, the path that you've written should look like:\n'C:\\\\Studies\\\\PYTHON\\\\Web Scrapers'\nWindows accepts \"\\\\\" when mentioning the path. Attached a screenshot for your reference!\n\nUPDATE: This is the code that I had written to scrape a website. You can check it here.\nfor link in links[:5]:\n    # Extract the scores\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    path = \"C:\\\\Users\\\\lenovo\\\\Documents\\\\chromedriver.exe\"\n    driver = webdriver.Chrome(path, options = options)\n    driver.get(link)\n\nYou can check out the entire code HERE.\n"]}, {"type": 1, "title": "selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH using ChromeDriverManager and Python", "question": "\nI tried to fix the above error by check Stackoverflow and other resources from the internet. But I am getting the error.\nI have installed the webdriver_manager also. But I could not able to run the code.\nI am using kubuntu, pycharm.\nBelow is my code:\n\nBelow is my error message:\n\nPlease help me to find the solution\n", "answers": ["\nThe error is\nDeprecationWarning: executable_path has been deprecated, please pass in a Service object\n\nSolution is:\ns = Service('/home/halovivek/Documents/Automation/selenium_driver/chromedriver.exe')\ndriver = webdriver.Chrome(service = s)\ndriver.maximize_window()\ndriver.get(\"https://www.google.com\")\n\nMake sure to download latest version of chromedriver from here\nImports:\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\n\n", "\nfrom selenium.webdriver.chrome.service import Service\nfrom webdriver_manager.chrome import ChromeDriverManager\ndriver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\n\nHave to use them in conjuction since executable path has been depreciated.\n", "\nYou need to take care of a couple of things as follows:\n\nIf at all you are using ChromeDriverManager - Webdriver Manager for Python you don't have to explicitly download the ChromeDriver as it automatically gets downloaded.\nIf you want to use the downloaded ChromeDriver you can avoid using ChromeDriverManager - Webdriver Manager\nAdditionally, executable_path has been deprecated in selenium4 and you have to use an instance of Service().\n\n\nSolution\nUsing ChromeDriverManager you can use the following code block:\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\nfrom webdriver_manager.chrome import ChromeDriverManager\n\ndriver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\ndriver.maximize_window()\ndriver.get(\"https://www.google.com\")\n\nDownloading a specific version of ChromeDriver you can use the following code block:\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\n\ns = Service('/home/halovivek/Documents/Automation/selenium_driver/chromedriver')\ndriver = webdriver.Chrome(service=s)\n\nNote: If you are on Linux / MAC O SX system you need to strip the extension part i.e. .exe as it is applicable only for windows platforms.\n\nReference\nYou can find a couple of detailed discussions in:\n\nUse Selenium with Brave Browser pass service object written in python\n\n"]}, {"type": 1, "title": "How can I fix \"WebDriverException: 'chromedriver' executable needs to be in PATH\" issue? [duplicate]", "question": "\n\n\n\n\n\n\nThis question already has answers here:\n                        \n                    \n\n\n\nWebDriverException: Message: 'chromedriver' executable needs to be in PATH while setting UserAgent through Selenium Chromedriver python\n\n                                (1 answer)\n                            \n\n\nselenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH error with Headless Chrome\n\n                                (1 answer)\n                            \n\n\nError Message: 'chromedriver' executable needs to be PATH\n\n                                (2 answers)\n                            \n\nClosed 8 months ago.\nThe community reviewed whether to reopen this question 8 months ago and left it closed:\n\n\n\n\n\n", "answers": []}, {"type": 1, "title": "selenium - chromedriver executable needs to be in PATH [duplicate]", "question": "\n\n\n\n\n\n\nThis question already has answers here:\n                        \n                    \n\n\n\nError message: \"'chromedriver' executable needs to be available in the path\"\n\n                                (30 answers)\n                            \n\nClosed 1 year ago.\n\n\n\nError message: \n\nI was trying to code a script using selenium in pycharm, however the error above occured. I have already linked my selenium to pycharm as seen here (fresh and up to date).\nI am new to selenium, isn't chromedriver in the folder \"selenium.\"\nIf it isn't, where can I find it and add it to the path?\nBy the way, I tried typing \"chromedriver\" in cmd, however, it wasn't recognized as an internal or external command.\nerror shown below:\n\n", "answers": ["\nYou can download ChromeDriver here:\nhttps://sites.google.com/chromium.org/driver/\nThen you have multiple options:\n\nadd it to your system path\n\nput it in the same directory as your python script\n\nspecify the location directly via executable_path\n driver = webdriver.Chrome(executable_path='C:/path/to/chromedriver.exe')\n\n\n\n", "\nTry this :\npip install webdriver-manager\n\nfrom selenium import webdriver\nfrom webdriver_manager.chrome import ChromeDriverManager\n\ndriver = webdriver.Chrome(ChromeDriverManager().install())\n\n", "\nAnother way is download and unzip chromedriver and put 'chromedriver.exe' in C:\\Python27\\Scripts and then you need not to provide the path of driver, just \ndriver= webdriver.Chrome()\n\nwill work\n", "\nAn answer from 2020. The following code solves this. A lot of people new to selenium seem to have to get past this step. \nInstall the chromedriver and put it inside a folder on your desktop. Also make sure to put the selenium python project in the same folder as where the chrome driver is located. \nChange USER_NAME and FOLDER in accordance to your computer. \nFor Windows\ndriver = webdriver.Chrome(r\"C:\\Users\\USER_NAME\\Desktop\\FOLDER\\chromedriver\")\n\n\nFor Linux/Mac\ndriver = webdriver.Chrome(\"/home/USER_NAME/FOLDER/chromedriver\")\n\n", "\nDo not include the '.exe' in your file path.  \nFor example:\nfrom selenium import webdriver\n\ndriver = webdriver.Chrome(executable_path='path/to/folder/chromedriver')\n\n", "\ntry this :\ndriver = webdriver.Chrome(ChromeDriverManager().install())\n\n", "\nAnother way is download and unzip chromedriver and put 'chromedriver.exe' in C:\\Python27\\Scripts and then you need not to provide the path of driver, just\ndriver= webdriver.Chrome()\n\nwill work\nCan testify that this also works for Python3.7.\n"]}, {"type": 1, "title": "'chromedriver' executable needs to be in PATH - Python - Selenium (MAC)", "question": "\nI keep getting this error:\nselenium.common.exceptions.WebDriverException: Message: 'chromedriver.exe' executable needs to be in PATH. Please see https://chromedriver.chromium.org/home\nMy Script: (MAC)\n\nWhat should I do? The Path is okay. I though there is something wrong with the format so I added \".exe\" to file, but I am getting the same issue.\nNote: The browser and package version are the same (96)\n", "answers": ["\nPATH should contain the Folder Path to your driver.\nHaving '~ ABC' in your path makes it look for something in the ~ ABC file which does not exsist as a parent file to /Users/\n"]}, {"type": 1, "title": "'chromedriver' executable needs to be in PATH using Docker [duplicate]", "question": "\n\n\n\n\n\n\nThis question already has answers here:\n                        \n                    \n\n\n\nChromedriver executable path not found in Docker Container\n\n                                (3 answers)\n                            \n\nClosed 6 months ago.\n\n\n\nI have a following problem.\nIn my scrape.py I set WebDriver using a function nastav_driver():\n\nwhere utils.PATH_CHROMIUM is /usr/lib/chromium-browser/chromedriver. When I run the script, everything is OK. But When I run a docker image using sudo docker run python:0.0.1  I got this error:\n\nWhat is the problem here, please?\n", "answers": ["\nYou should define and put the web driver exe file somewhere inside your selenium project so as when you run your project in a docker or on some other machine, for example on Windows PC, it will still work correctly.\nFor example my FireFox driver is located here:\n./src/main/resources/geckodriver.exe\n\nSo the code line is\nSystem.setProperty(\"webdriver.gecko.driver\", \"./src/main/resources/geckodriver.exe\");\n\nThe same for Chrome and Edge drivers.\nYou can set the specific location of the driver exe files in your project accordingly to your project actual structure.\nThe syntax above is in Java, but with Python it will be quite similar.\n"]}, {"type": 1, "title": "WebDriverException: WebDriverException: Message: 'chromedriver' executable needs to be in PATH", "question": "\nI'm new with Selenium and I have this error:\n\nWhat this error means and how to fix it?\n", "answers": ["\nThis happens when the path for the chromedriver.exe file is wrong.\nThe chromedriver.exe file can be stored in your local.\nSuppose the .exe file is in the C: drive \u2192 Chromedriver folder, this would be the correct path:\n\"C:\\Chromedriver\\chromedriver.exe\"\ndriver = webdriver.Chrome(executable_path=\"C:\\Chromedriver\\chromedriver.exe\")\n\n"]}, {"type": 1, "title": "WebDriverException: Message: 'chromedriver' executable needs to be in PATH using python language on Google Colaboratory", "question": "\nI want to get the chromedriver in executable path. I am using googlecolab to execute the code:\n\nis  the error i am getting. Tried out the solutions previously given on this platform not getting the solution.Tried backslash,double slash,r\"\",automatic installation of driver which is giving version error etc Please suggest solution.\n\n", "answers": ["\nGoogle Colaboratory\nColaboratory is a free Jupyter notebook environment that requires no setup and runs entirely in the cloud which enables us to write and execute code, save and share your analyses, and access powerful computing resources, all for free from your browser.\nThe entire colab runs in a cloud VM. If you investigate the VM you will find that the current colab notebook is running on top of Ubuntu 18.04.3 LTS.\n\nThis usecase\nIncase you aren't sure where the ChromeDriver is getting downloaded you can move it to a known location and use it as follows:\n!apt-get update\n!apt install chromium-chromedriver\n!cp /usr/lib/chromium-browser/chromedriver /usr/bin\n!pip install selenium\n\nfrom selenium import webdriver\nwd = webdriver.Chrome('/usr/bin/chromedriver')\n\n\nReferences\nYou can find a couple of detailed relevant discussions in:\n\nWebDriverException: Message: 'chromedriver.exe' executable may have wrong permissions using Google Colaboratory through Selenium Python\n\n"]}, {"type": 2, "title": "Unknown error: Chrome failed to start: exited abnormally", "question": "\nI am getting this error when I run my tests with Selenium using chromedriver.\n\nI did download google-chrome stable and also chromedriver and have used this code to start the browser.\n\nAny suggestions anyone? Thanks.\n", "answers": ["\nFor Linux :\nStart the Display before start the Chrome. for more info click here\nfrom pyvirtualdisplay import Display\ndisplay = Display(visible=0, size=(800, 800))  \ndisplay.start()\ndriver = webdriver.Chrome()\n\n", "\nTo help debug this problem you can use the service_log_path and service_args arguments to the selenium webdriver to see output from the chromedriver:\nservice_log_path = \"{}/chromedriver.log\".format(outputdir)\nservice_args = ['--verbose']\ndriver = webdriver.Chrome('/path/to/chromedriver',\n        service_args=service_args,\n        service_log_path=service_log_path)\n\nI was getting this same exception message and found two ways to get past it; I'm not sure if the OP's problem is the same, but if not, the chromedriver log will hopefully help. Looking at my log, I discovered that the chromedriver (I tried 2.9 down to 2.6 while trying to fix this problem) decides which browser to run in a very unexpected way. In the directory where my chromedriver is located I have these files:\n$ ls -l /path/to/\n-rwx------  1 pjh grad_cs 5503600 Feb  3 00:07 chromedriver-2.9\ndrwxr-xr-x  3 pjh grad_cs    4096 Mar 28 15:51 chromium\n\nWhen I invoke the chromedriver using the same python code as the OP:\ndriver = webdriver.Chrome('/path/to/chromedriver-2.9')\n\nThis leads to the exception message. In the chromedriver.log I found this message:\n[1.043][INFO]: Launching chrome: /path/to/chromium ...\n\nUnbelievable! The chromedriver is trying to use /path/to/chromium (which is not an executable file, but a directory containing source code) as the browser to execute! Apparently chromedriver tries to search the current directory for a browser to run before searching my PATH. So, one easy solution to this problem is to check the directory where the chromedriver is located for files/directories like chrome and chromium and move them to a different directory than the chromedriver.\nA better solution is to explicitly tell selenium / chromedriver which browser to execute by using the chrome_options argument:\noptions = webdriver.ChromeOptions()\noptions.binary_location = '/opt/google/chrome/google-chrome'\nservice_log_path = \"{}/chromedriver.log\".format(outputdir)\nservice_args = ['--verbose']\ndriver = webdriver.Chrome('/path/to/chromedriver',\n        chrome_options=options,\n        service_args=service_args,\n        service_log_path=service_log_path)\n\nThe chromedriver.log now shows:\n[0.999][INFO]: Launching chrome: /opt/google/chrome/google-chrome ...\n\nas expected.\n", "\nAn alternative solution of using a virtual display is the headless mode.\nfrom selenium import webdriver\n\nchrome_options = webdriver.ChromeOptions()\nchrome_options.add_argument('--no-sandbox')\nchrome_options.add_argument('--window-size=1420,1080')\nchrome_options.add_argument('--headless')\nchrome_options.add_argument('--disable-gpu')\ndriver = webdriver.Chrome(chrome_options=chrome_options)\n\n", "\nIf using Linux make sure you are not running as root. That what gave me the error.\n", "\nSomeone already mentioned about --no-sandbox option, but to expand on it: make sure, it's the first option you pass:\n        System.setProperty(\"webdriver.chrome.driver\",\n                Paths.get(\"setups\", driverFolder, driverFile).toAbsolutePath().toString());\n\n        ChromeOptions options = new ChromeOptions();\n        Map<String, Object> prefs = new HashMap<>();\n        prefs.put(\"intl.accept_languages\", \"English\");\n        options.setExperimentalOption(\"prefs\", prefs);\n\n        options.addArguments(\"--no-sandbox\");\n        options.addArguments(\"--disable-features=VizDisplayCompositor\");\n        options.addArguments(\"--incognito\");\n        options.addArguments(\"enable-automation\");\n        options.addArguments(\"--headless\");\n        options.addArguments(\"--window-size=1920,1080\");\n        options.addArguments(\"--disable-gpu\");\n        options.addArguments(\"--disable-extensions\");\n        options.addArguments(\"--dns-prefetch-disable\");\n        options.setPageLoadStrategy(PageLoadStrategy.NORMAL);\n\n        options.addArguments(\"enable-features=NetworkServiceInProcess\");\n\n        DesiredCapabilities capabilities = DesiredCapabilities.chrome();\n        capabilities.setCapability(\"marionette\", true);\n        capabilities.setCapability(ChromeOptions.CAPABILITY, options);\n\n        WebDriver driver = new ChromeDriver(capabilities);\n        driver.manage().timeouts().implicitlyWait(15, SECONDS);\n        driver.manage().timeouts().pageLoadTimeout(15, SECONDS);\n\nWhen it was added after other options, I got the error.\n", "\nYou may be able to fix this issue by making sure your version of chromedriver is right for the version of Chrome you have installed, which you can check here. You will also need to remove your current version of chromedriver before installing the new one, as described in Delete Chromedriver from Ubuntu\n", "\nI was faced with the same  issue and fixed it by installing Chrome in:\nC:\\Users\\..\\AppData\\Local\\Google\\Chrome\\Application\n\nYou can do this by running the Chrome Setup and saying no when prompted by the User Account Control.\n", "\nI got the same error when I crawl something using scrapy + selenium + chrome driver on Centos 7\uff0cand  the method of following url solved my problem.\nyum install mesa-libOSMesa-devel gnu-free-sans-fonts\n\nrefer:https://bugs.chromium.org/p/chromium/issues/detail?id=695212\n", "\nAnother solution for selenium webdriver is X virtual frame buffer:\nwith Xvfb() as _:\n    timeout_request = ConfigTargetsManager.target_global_configs.get('timeout_request', 10)\n    driver = webdriver.Chrome(executable_path=ConfigTargetsManager.target_global_configs.get('chrome_browser_path',\n                                                                                             '/usr/lib/chromium-browser/chromedriver'))\n    driver.get(url)\n\n", "\nThis issue resolved using below steps\n\nInstall Xvfb\nCentos 7 : yum install chromedriver chromium xorg-x11-server-Xvfb\n\nupdate chrome driver\nCentos 7 : wget https://chromedriver.storage.googleapis.com/2.40/chromedriver_linux64.zip\n\n\n"]}, {"type": 2, "title": "WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\" (Driver info: chromedriver=97) using Selenium Python", "question": "\nI installed the most up-to-date version of Chrome, then I verified that the execution_path of the webdriver.Chrome was deprecated, I put the Selenium Service lib and still I can't connect, what could be happening in the code?\n\n\n", "answers": ["\nThis error message...\nWebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\" (Driver info: chromedriver=97)\n\n...implies that the ChromeDriver was unable to initiate/spawn a new Browsing Context i.e. Chrome Browser session.\nYour main issue is the incompatibility between the version of the binaries you are using as follows:\n\nThe up to date google-chrome version is chrome=96.0.4664.45\n\n\n\nBut you are using chromedriver=97\nRelease Notes of chromedriver=97.0 clearly mentions the following :\n\n\nSupports Chrome version 97\n\nSo there is a clear mismatch between chromedriver=91.0 and the chrome=96.0.4664.45\n\nSolution\nEnsure that:\n\nChromeDriver is updated to  current ChromeDriver v96.0 level.\nChrome is updated to  current chrome=96.0.4664.45 (as per chrome=96.0.4664.45 release notes).\n\n"]}, {"type": 2, "title": "WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally error using ChromeDriver Chrome and Selenium Python", "question": "\nI'm trying to install and use Selenium chromedriver on my virtual ubuntu shell, I follow step by step various tutorial but it seems there is still something going wrong ... And after many research on the issue I can't find any answer. \nHere is the little code I'm trying to run : \n\nI added the chrome_options thanks to the advice I found on various topic. However I don't really understand why is it necessary?\nUnfortunately, my program send me the following error and here I am, stuck and I don't know what to do:\n\nAnyone already had this issue or have any suggestion on it?\n", "answers": ["\nThumb rule\n\nA common cause for Chrome to crash during startup is running Chrome as root user (administrator) on Linux. While it is possible to work around this issue by passing --no-sandbox flag when creating your WebDriver session, such a configuration is unsupported and highly discouraged. You need to configure your environment to run Chrome as a regular user instead.\n\n\nThis first error message...\n/home/lclis/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:7: DeprecationWarning: use options instead of chrome_options\n  import sys\n---------------------------------------------------------------------------\nWebDriverException                        Traceback (most recent call last)\n<ipython-input-4-259faa721232> in <module>\n      5 chrome_options.add_argument('--no-sandbox')\n      6 chrome_options.add_argument('--disable-extensions')\n----> 7 driver = webdriver.Chrome(chrome_options=chrome_options)\n\n...implies that the ChromeDriver was unable to initiate/spawn a new Browsing Context i.e. Chrome Browser session.\n\nAs per the Release Notes of Selenium's python client v3.8.0 chrome_options is deprecated:\n\nBrowser option parameters are now standardized across drivers as options. firefox_options, chrome_options, and ie_options are now deprecated.\n\n\nSolution\nYou need to use options instead of chrome_options while initializing ChromeDriver/Chrome session. So effectively your code block will be:\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\nchrome_options = Options()\nchrome_options.add_argument('--no-sandbox')\nchrome_options.add_argument('--disable-extensions')\ndriver = webdriver.Chrome(executable_path='/path/to/chromedriver', options=chrome_options)\ndriver.get('https://google.com')\n\n", "\nYou can run a selenium crawler on a server (ubuntu with no GUI, no X window available in the box) with this code snippet :\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\nchrome_options = Options()\nchrome_options.add_argument('--no-sandbox')\nchrome_options.add_argument('--headless')\n\ndriver = webdriver.Chrome(executable_path='/usr/lib/chromium-browser/chromedriver', options=chrome_options)\ndriver.get('https://google.com')\n\n", "\nI was googling for ruby error, but found this. For some it may be helpful.\nI wrongly set capybara session (which relies on selenium on its own)\n# WRONG\nsession = Capybara::Session.new(:selenium_chrome)\n\n# CORRECT, see headless added\nsession = Capybara::Session.new(:selenium_chrome_headless)\n\n"]}, {"type": 2, "title": "WebDriverException: unknown error: Chrome failed to start: exited abnormally error running Selenium Grid on Server using ChromeDriver and Chrome", "question": "\nGood evening,\nI tried to run my automated tests on a server with Eclipse / Selenium and TestNG. So far the configuration of Selenium Grid worked fine. I got the response:\n\nHere's my example code:\n\nUnfortunately I got the error:\n\nThe path to the chromedriver is:\n\nInstalled version:\n\nDo you have any idea how I could fix the error? Had a look at different sites with this error, no solution is working for me.\n", "answers": ["\nThis error message...\nTest started\nFAILED: executeOnServer\norg.openqa.selenium.WebDriverException: unknown error: **Chrome failed to start: exited abnormally.**\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nBuild info: version: '3.4.0', revision: 'unknown', time: 'unknown'\nSystem info: host: 'h28xxxxx.stratoserver.net', ip: '81.169.xxx.xxx', os.name: 'Linux', os.arch: 'amd64', os.version: '4.15.0', java.version: '1.8.0_252'\nDriver info: driver.version: ChromeDriver\nremote stacktrace: #0 0x559967ec9ea9 <unknown>\n\n...implies that the ChromeDriver was unable to initiate/spawn a new Browsing Context i.e. Chrome Browser session.\nYour main issue is the incompatibility between the version of the binaries you are using as follows:\n\nYou are using chromedriver=84.0\nPossibly you are using the latest chrome=84.0\nYour Selenium Client version is 3.4.0 of revision: 'unknown', time: 'unknown'\n\nSo that implies the ChromeDriver is unable to interact with the Selenium bindings as there is a clear mismatch between Selenium v3.4.0 and the ChromeDriver v84.0\n\nSolution\nEnsure that:\n\nSelenium is upgraded to  current levels Version 3.141.59.\nChromeDriver is updated to  current ChromeDriver v84.0 level.\nChrome is updated to  current Chrome Version 84.0 level. (as per ChromeDriver v84.0 release notes)\nIf your base Web Client version is too old, then uninstall it and install a recent GA and released version of Web Client.\nClean your Project Workspace through your IDE and Rebuild your project with required dependencies only.\nTake a System Reboot.\nExecute your @Test as non-root user.\nAlways invoke driver.quit() within tearDown(){} method to close & destroy the WebDriver and Web Client instances gracefully.\n\n"]}, {"type": 2, "title": "WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally with ChromeDriver Chrome and Selenium through Python on VPS", "question": "\nSo I have the exact same error as these posts\nSelenium 'Chrome failed to start: exited abnormally' error \nUnknown error: Chrome failed to start: exited abnormally\nI tried what they recommended and it didn't work. \nHere is my code \n\nAnd here is the full error message\n\nWhat the devil am I doing wrong? I'm running this on an ubuntu VPS on digitalocean. \n", "answers": ["\nThis error message...\nselenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally\n  (Driver info: chromedriver=2.30.477691 (6ee44a7247c639c0703f291d320bdf05c1531b57),platform=Linux 4.15.0-42-generic x86_64)\n\n...implies that the ChromeDriver was unable to initiate/spawn a new WebBrowser i.e. Chrome Browser session.\nThere are exactly two incompatibility issues as discussed below.\n\ndisable-gpu\nWhen Headless Chrome was first released as GA (General Availability) by Google Team the article Getting Started with Headless Chrome mentioned that :\n--disable-gpu \\                # Temporarily needed if running on Windows.\n\nA note was added as :\n\nRight now, you'll also want to include the --disable-gpu flag if you're running on Windows.\n\nAs per the discussion Headless: make --disable-gpu flag unnecessary it was clear that :\n\nThe --disable-gpu flag is no longer necessary on Linux or Mac OSX. It will also become unnecessary on Windows as soon as the bug SwiftShader fails an assert on Windows in headless mode is fixed. Now as this issue is marked fixed the argument --disable-gpu should be redundant now.\n\nNote: You can find a detailed discussion in ERROR:gpu_process_transport_factory.cc(1007)-Lost UI shared context : while initializing Chrome browser through ChromeDriver in Headless mode\n\nHowever, your main issue is the incompatibility between the version of the binaries you are using as follows:\n\nYou are using chromedriver=2.30 \nRelease Notes of chromedriver=2.30 clearly mentions the following :\n\n\nSupports Chrome v58-60\n\n\nYour chrome version is unknown to us. Assuming you are using on of the latest Chrome releases either among:\n\n\nChrome version 71\nChrome version 72\nChrome version 73\n\n\nSo there is a clear mismatch between ChromeDriver v2.30 and the Chrome Browser v71-73\nSolution\n\nDepending on your Chrome Browser version upgrade ChromeDriver accordingly following the guidelines below:\n\n\nIf you are using Chrome version 73, you need to download ChromeDriver 73.0.3683.20\nIf you are using Chrome version 72, you need to download ChromeDriver 2.46 or ChromeDriver 72.0.3626.69\nIf you are using Chrome version 71, you need to download ChromeDriver 2.46 or ChromeDriver 71.0.3578.137\nFor older version of Chrome, see this discussion for the version of ChromeDriver that supports it.\n\n\n\nReferences\nYou can find a couple of relevant discussions in:\n\nOpenQA.Selenium.WebDriverException: unknown error: Chrome failed to start: exited abnormally while executing tests through Selenium start on linux\nWebDriverException: Message: unknown error: Chrome failed to start: exited abnormally with ChromeDriver Chrome and Selenium on debian server\nMessage: unknown error: Chrome failed to start: exited abnormally on AWS Cloud9 with Linux 4.9.85-38.58.amzn1.x86_64 x86_64\n\n", "\nYou haven't provided your browser's version, but chromedriver 2.30 is pretty old - circa June 2017; Chrome was version 59 then, and at 72 now. (yes, I checked, it's not like I know their release history by heart \ud83d\ude00)\nI'd suggest to upgrade it to a recent version - or to one matching your installed browser.\n"]}, {"type": 2, "title": "Error in Google Colab WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally", "question": "\n\nP.S - Both selenium and chrome drivers are up to-date.I can't understand Why is this error occurring.\n", "answers": []}, {"type": 2, "title": "org.openqa.selenium.WebDriverException: unknown error: Chrome failed to start: exited abnormally error in Github action runner ubuntu-latest", "question": "\nFor my selenium automated test in Github Actions, in my test setup, I am trying to open the FireFox driver. The code is given below.\n\nThe above code works fine. However the problem is that I have two github accounts. The code works without any issues in one of the Github accounts but the same code fails in another Github account.\nHere is the exception that I am getting:\n\nI tried with both Firefox and Chrome driver but both the options failed.\nFor chrome driver, I tried by adding the following arguments but none of the options worked for chrome.\n\nThe following exception keeps happening\n\nAny help with this will be appreciated.\n", "answers": ["\nThis error message...\nsetup FAILED\n    java.lang.IllegalStateException: Can't start Web Driver\n    at src.test.java.tests.LoginTest.setup(LoginTest.java:86)\n\n    Caused by:\n    org.openqa.selenium.WebDriverException: unknown error: Chrome failed to start: exited abnormally.\n      (unknown error: DevToolsActivePort file doesn't exist)\n      (The process started from chrome location Drivers/chromedriver is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\n\n...implies that the ChromeDriver was unable to initiate/spawn a new Browsing Context i.e. google-chrome session.\nYour main issue seems to be with the method setBinary():\noptions.setBinary(new File(\"/path/to/chrome\"));\n\nInstead of ChromeDriver you need to pass the absolute location of the Google Chrome executable.\n\nSolution\nEffectively, your line of code will be:\noptions.setBinary(\"/path/to/chrome\");\n\n"]}, {"type": 2, "title": "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally error with Chromedriver 2.26 Selenium", "question": "\nI am trying to set up chrome webdriver in ubuntu. I already did\n\nand I can do\n\nTo install chrome webdriver, I have tried many things. For example, I tired an answer from Can't use chrome driver for Selenium\nHere, I tried\n\nCheck you have installed latest version of chrome browser-> \"chromium-browser -version\"\nIf not, install latest version of chrome \"sudo apt-get install chromium-browser\"\nGet the appropriate version of chrome driver from http://chromedriver.storage.googleapis.com/index.html\nUnzip the chromedriver.zip\nMove the file to /usr/bin directory sudo mv chromedriver /usr/bin\nGoto /usr/bin directory and you would need to run something like \"chmod a+x chromedriver\" to mark it executable.\nfinally you can execute the code.\n\nAccording to it, I could do\n\nHowever, in the second line I am getting the error:\n\nCan anyone help me?\n", "answers": ["\nUse webdriver-manager\nwebdriver-manager\nBelow 3 lines should do the job for you:\nfrom selenium import webdriver\nfrom webdriver_manager.chrome import ChromeDriverManager\n\ndriver = webdriver.Chrome(ChromeDriverManager().install()) \n\n", "\nThis error message...\nselenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally\n  (Driver info: chromedriver=2.26.436382 (70eb799287ce4c2208441fc057053a5b07ceabac),platform=Linux 4.15.0-109-generic x86_64)\n\n...implies that the ChromeDriver was unable to initiate/spawn a new Browsing Context i.e. Chrome Browser session.\nYour main issue is the incompatibility between the version of the binaries you are using as follows:\n\nYou are using chromedriver=2.26\nRelease Notes of chromedriver=2.26 clearly mentions the following :\n\n\nSupports Chrome v53-55\n\n\nPossibly you are using the latest chrome=83.0\nRelease Notes of ChromeDriver v83.0 clearly mentions the following :\n\n\nSupports Chrome version 83\n\nSo there is a clear mismatch between ChromeDriver v2.26 and the Chrome Browser v83.0\n\nSolution\nEnsure that:\n\nJDK is upgraded to  current levels JDK 8u251.\nSelenium is upgraded to  current levels Version 3.141.59.\nChromeDriver is updated to  current ChromeDriver v83.0 level.\nChrome is updated to  current Chrome Version 83.0 level. (as per ChromeDriver v83.0 release notes)\nIf your base Web Client version is too old, then uninstall it and install a recent GA and released version of Web Client.\nClean your Project Workspace through your IDE and Rebuild your project with required dependencies only.\nIf your base Web Client version is too old, then uninstall it and install a recent GA and released version of Web Client.\nTake a System Reboot.\nExecute your @Test as non-root user.\nAlways invoke driver.quit() within tearDown(){} method to close & destroy the WebDriver and Web Client instances gracefully.\n\n"]}, {"type": 2, "title": "Laravel Dusk running in Ubuntu 20.04 Error Chrome failed to start: exited abnormally", "question": "\nWhen I run\n\nIt prompt the error\n\nI check the chrome driver, it is install correctly.\n\n\nThen I google the error. They said to check the chrome version\n\n\nMy goal is need to run Laravel Dusk in Ubuntu 20.04.\n", "answers": ["\n***Make sure your chromium-browser need to REMOVE and INSTALL snap stable version MATCH with your Laravel Dusk Chrome Driver\nBelow is the step, I run:-\nNext fix the Chromium issue by install via snap, then next error\n$ sudo snap refresh --edge chromium\n\n\nerror: cannot communicate with server: Post\nhttp://localhost/v2/snaps/chromium: dial unix /run/snapd.socket:\nconnect: no such file or directory\n\nto solve the error, need to update the packages.\n$ sudo add-apt-repository ppa:saiarcot895/chromium-beta\n$ sudo apt-get update\n$ sudo apt-get install chromium-browser\n\nFinally, it show the version. However, does not match my Laravel Chrome driver. Didn't solve my first issue. Still can't run dusk\n$ /usr/bin/chromium-browser --version\nChromium 97.0.4692.20 Ubuntu 20.04\n\nNext install snap version of Chrome and remove the chromium-browser\n$ systemctl start snapd.service\n$ sudo snap install chromium\n$ sudo apt remove chromium-browser\n\nIMPORTANT NOTE\n$ /usr/bin/chromium-browser --version\n-bash: /usr/bin/chrome: No such file or directory\nBoom~ It works~\n"]}, {"type": 3, "title": "YouTube Data API to crawl all comments and replies", "question": "\nI have been desperately seeking a solution to crawl all comments and corresponding replies for my research. Am having a very hard time creating a data frame that includes comment data in correct and corresponding orders.\nI am gonna share my code here so you professionals can take a look and give me some insights.\n\nWhen I do this, my crawler collects comments but doesn't collect some of the replies that are under certain comments.\nHow can I make it collect comments and their corresponding replies and put them in a single data frame?\nUpdate\nSo, somehow I managed to pull the information I wanted at the output section of Jupyter Notebook. All I have to do now is to append the result at the data frame.\nHere is my updated code:\n\nThe result is:\n\nAs you can see, the comments grouped under ======== lines are the comment and corresponding replies underneath.\nWhat would be a good way to append the result into the data frame?\n", "answers": ["\nAccording to the official doc, the property replies.comments[] of CommentThreads resource has the following specification:\n\nreplies.comments[] (list)\nA list of one or more replies to the top-level comment. Each item in the list is a comment resource.\nThe list contains a limited number of replies, and unless the number of items in the list equals the value of the snippet.totalReplyCount property, the list of replies is only a subset of the total number of replies available for the top-level comment. To retrieve all of the replies for the top-level comment, you need to call the Comments.list method and use the parentId request parameter to identify the comment for which you want to retrieve replies.\n\nConsequently, if wanting to obtain all reply entries associated to a given top-level comment, you will have to use the Comments.list API endpoint queried appropriately.\nI recommend you to read my answer to a very much related question; there are three sections:\n\nTop-Level Comments and Associated Replies,\nThe property nextPageToken and the parameter pageToken, and\nAPI Limitations Imposed by Design.\n\nFrom the get go, you'll have to acknowledge that the API (as currently implemented) does not allow to obtain all top-level comments associated to a given video when the number of those comments exceeds a certain (unspecified) upper bound.\n\nFor what concerns a Python implementation, I would suggest that you do structure the code as follows:\ndef get_video_comments(service, video_id):\n    request = service.commentThreads().list(\n        videoId = video_id,\n        part = 'id,snippet,replies',\n        maxResults = 100\n    )\n    comments = []\n\n    while request:\n        response = request.execute()\n\n        for comment in response['items']:\n            reply_count = comment['snippet'] \\\n                ['totalReplyCount']\n            replies = comment.get('replies')\n            if replies is not None and \\\n               reply_count != len(replies['comments']):\n               replies['comments'] = get_comment_replies(\n                   service, comment['id'])\n\n            # 'comment' is a 'CommentThreads Resource' that has it's\n            # 'replies.comments' an array of 'Comments Resource'\n\n            # Do fill in the 'comments' data structure \n            # to be provided by this function:\n            ...\n\n        request = service.commentThreads().list_next(\n            request, response)\n\n    return comments\n\ndef get_comment_replies(service, comment_id):\n    request = service.comments().list(\n        parentId = comment_id,\n        part = 'id,snippet',\n        maxResults = 100\n    )\n    replies = []\n\n    while request:\n        response = request.execute()\n        replies.extend(response['items'])\n        request = service.comments().list_next(\n            request, response)\n\n    return replies\n\nNote that the ellipsis dots above -- ... -- would have to be replaced with actual code that fills in the array of structures to be returned by get_video_comments to its caller.\nThe simplest way (useful for quick testing) would be to have ... replaced with comments.append(comment) and then the caller of get_video_comments to simply pretty print (using json.dump) the object obtained from that function.\n", "\nBased on stvar' answer and the original publication here I built this code:\nimport os\nimport pickle\nimport csv\nimport json\nimport google.oauth2.credentials\nfrom googleapiclient.discovery import build\nfrom googleapiclient.errors import HttpError\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom google.auth.transport.requests import Request\n\nCLIENT_SECRETS_FILE = \"client_secret.json\" # for more information  to create your credentials json please visit https://python.gotrained.com/youtube-api-extracting-comments/\nSCOPES = ['https://www.googleapis.com/auth/youtube.force-ssl']\nAPI_SERVICE_NAME = 'youtube'\nAPI_VERSION = 'v3'\n\ndef get_authenticated_service():\n    credentials = None\n    if os.path.exists('token.pickle'):\n        with open('token.pickle', 'rb') as token:\n            credentials = pickle.load(token)\n    #  Check if the credentials are invalid or do not exist\n    if not credentials or not credentials.valid:\n        # Check if the credentials have expired\n        if credentials and credentials.expired and credentials.refresh_token:\n            credentials.refresh(Request())\n        else:\n            flow = InstalledAppFlow.from_client_secrets_file(\n                CLIENT_SECRETS_FILE, SCOPES)\n            credentials = flow.run_console()\n\n        # Save the credentials for the next run\n        with open('token.pickle', 'wb') as token:\n            pickle.dump(credentials, token)\n\n    return build(API_SERVICE_NAME, API_VERSION, credentials = credentials)\n\ndef get_video_comments(service, **kwargs):\n    request = service.commentThreads().list(**kwargs)\n    comments = []\n\n    while request:\n        response = request.execute()\n\n        for comment in response['items']:\n            reply_count = comment['snippet'] \\\n                ['totalReplyCount']\n            replies = comment.get('replies')\n            if replies is not None and \\\n               reply_count != len(replies['comments']):\n               replies['comments'] = get_comment_replies(\n                   service, comment['id'])\n\n            # 'comment' is a 'CommentThreads Resource' that has it's\n            # 'replies.comments' an array of 'Comments Resource'\n\n            # Do fill in the 'comments' data structure \n            # to be provided by this function:\n            comments.append(comment)\n\n        request = service.commentThreads().list_next(\n            request, response)\n\n    return comments\ndef get_comment_replies(service, comment_id):\n    request = service.comments().list(\n        parentId = comment_id,\n        part = 'id,snippet',\n        maxResults = 1000\n    )\n    replies = []\n\n    while request:\n        response = request.execute()\n        replies.extend(response['items'])\n        request = service.comments().list_next(\n            request, response)\n\n    return replies\n\n\nif __name__ == '__main__':\n    # When running locally, disable OAuthlib's HTTPs verification. When\n    # running in production *do not* leave this option enabled.\n    os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'\n    service = get_authenticated_service()\n    videoId = input('Enter Video id : ') # video id here (the video id of https://www.youtube.com/watch?v=vedLpKXzZqE -> is vedLpKXzZqE)\n    comments = get_video_comments(service, videoId=videoId, part='id,snippet,replies', maxResults = 1000)\n\n\nwith open('youtube_comments', 'w', encoding='UTF8') as f:\n    writer = csv.writer(f, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n    for row in comments:\n            # convert the tuple to a list and write to the output file\n            writer.writerow([row])\n\n\nit returns a file called youtube_comments with this format:\n\"{'kind': 'youtube#commentThread', 'etag': 'gvhv4hkH0H2OqQAHQKxzfA-K_tA', 'id': 'UgzSgI1YEvwcuF4cPwN4AaABAg', 'snippet': {'videoId': 'tGTaBt4Hfd0', 'topLevelComment': {'kind': 'youtube#comment', 'etag': 'qpuKZcuD4FKf6BHgRlMunersEeU', 'id': 'UgzSgI1YEvwcuF4cPwN4AaABAg', 'snippet': {'videoId': 'tGTaBt4Hfd0', 'textDisplay': 'This is a comment', 'textOriginal': 'This is a comment', 'authorDisplayName': 'Gabriell Magana', 'authorProfileImageUrl': 'https://yt3.ggpht.com/ytc/AKedOLRGBvo2ZncDP1xGjlX6anfUufNYi9b3w9kYZFDl=s48-c-k-c0x00ffffff-no-rj', 'authorChannelUrl': 'http://www.youtube.com/channel/UCKAa4FYftXsN7VKaPSlCivg', 'authorChannelId': {'value': 'UCKAa4FYftXsN7VKaPSlCivg'}, 'canRate': True, 'viewerRating': 'none', 'likeCount': 8, 'publishedAt': '2019-05-22T12:38:34Z', 'updatedAt': '2019-05-22T12:38:34Z'}}, 'canReply': True, 'totalReplyCount': 0, 'isPublic': True}}\"\n\"{'kind': 'youtube#commentThread', 'etag': 'DsgDziMk7mB7xN4OoX7cmqlbDYE', 'id': 'UgytsI51LU6BWRmYtBB4AaABAg', 'snippet': {'videoId': 'tGTaBt4Hfd0', 'topLevelComment': {'kind': 'youtube#comment', 'etag': 'NYjvYM9W_umBafAfQkdg1P9apgg', 'id': 'UgytsI51LU6BWRmYtBB4AaABAg', 'snippet': {'videoId': 'tGTaBt4Hfd0', 'textDisplay': 'This is another comment', 'textOriginal': 'This is another comment', 'authorDisplayName': 'Mary Montes', 'authorProfileImageUrl': 'https://yt3.ggpht.com/ytc/AKedOLTg1b1yw8BX8Af0PoTR_t5OOwP9Cfl9_qL-o1iikw=s48-c-k-c0x00ffffff-no-rj', 'authorChannelUrl': 'http://www.youtube.com/channel/UC_GP_8HxDPsqJjJ3Fju_UeA', 'authorChannelId': {'value': 'UC_GP_8HxDPsqJjJ3Fju_UeA'}, 'canRate': True, 'viewerRating': 'none', 'likeCount': 9, 'publishedAt': '2019-05-15T05:10:49Z', 'updatedAt': '2019-05-15T05:10:49Z'}}, 'canReply': True, 'totalReplyCount': 3, 'isPublic': True}, 'replies': {'comments': [{'kind': 'youtube#comment', 'etag': 'Tu41ENCZYNJ2KBpYeYz4qgre0H8', 'id': 'UgytsI51LU6BWRmYtBB4AaABAg.8uwduw6ppF79DbfJ9zMKxM', 'snippet': {'videoId': 'tGTaBt4Hfd0', 'textDisplay': 'this is first reply', 'parentId': 'UgytsI51LU6BWRmYtBB4AaABAg', 'authorDisplayName': 'JULIO EMPRESARIO', 'authorProfileImageUrl': 'https://yt3.ggpht.com/eYP4MBcZ4bON_pHtdbtVsyWnsKbpNKye2wTPhgkffkMYk3ZbN0FL6Aa1o22YlFjn2RVUAkSQYw=s48-c-k-c0x00ffffff-no-rj', 'authorChannelUrl': 'http://www.youtube.com/channel/UCrpB9oZZZfmBv1aQsxrk66w', 'authorChannelId': {'value': 'UCrpB9oZZZfmBv1aQsxrk66w'}, 'canRate': True, 'viewerRating': 'none', 'likeCount': 2, 'publishedAt': '2020-09-15T04:06:50Z', 'updatedAt': '2020-09-15T04:06:50Z'}}, {'kind': 'youtube#comment', 'etag': 'OrpbnJddwzlzwGArCgtuuBsYr94', 'id': 'UgytsI51LU6BWRmYtBB4AaABAg.8uwduw6ppF795E1w8RV1DJ', 'snippet': {'videoId': 'tGTaBt4Hfd0', 'textDisplay': 'the second replay', 'textOriginal': 'the second replay', 'parentId': 'UgytsI51LU6BWRmYtBB4AaABAg', 'authorDisplayName': 'Anatolio27 Diaz', 'authorProfileImageUrl': 'https://yt3.ggpht.com/ytc/AKedOLR1hOySIxEkvRCySExHjo3T6zGBNkvuKpPkqA=s48-c-k-c0x00ffffff-no-rj', 'authorChannelUrl': 'http://www.youtube.com/channel/UC04N8BM5aUwDJf-PNFxKI-g', 'authorChannelId': {'value': 'UC04N8BM5aUwDJf-PNFxKI-g'}, 'canRate': True, 'viewerRating': 'none', 'likeCount': 2, 'publishedAt': '2020-02-19T18:21:06Z', 'updatedAt': '2020-02-19T18:21:06Z'}}, {'kind': 'youtube#comment', 'etag': 'sPmIwerh3DTZshLiDVwOXn_fJx0', 'id': 'UgytsI51LU6BWRmYtBB4AaABAg.8uwduw6ppF78wwH6Aabh4y', 'snippet': {'videoId': 'tGTaBt4Hfd0', 'textDisplay': 'A third reply', 'textOriginal': 'A third reply', 'parentId': 'UgytsI51LU6BWRmYtBB4AaABAg', 'authorDisplayName': 'Voy detr\u00e1s de mi pasi\u00f3n', 'authorProfileImageUrl': 'https://yt3.ggpht.com/ytc/AKedOLTgzZ3ZFvkmmAlMzA77ApM-2uGFfvOBnzxegYEX=s48-c-k-c0x00ffffff-no-rj', 'authorChannelUrl': 'http://www.youtube.com/channel/UCvv6QMokO7KcJCDpK6qZg3Q', 'authorChannelId': {'value': 'UCvv6QMokO7KcJCDpK6qZg3Q'}, 'canRate': True, 'viewerRating': 'none', 'likeCount': 2, 'publishedAt': '2019-07-03T18:45:34Z', 'updatedAt': '2019-07-03T18:45:34Z'}}]}}\"\n\nNow it is necessary a second step in order to information required. For this I a set of bash script toos like cut, awk and set:\ncut -d \":\" -f 10- youtube_comments | sed -e \"s/', '/\\n/g\" -e \"s/'//g\" | awk '/replies/{print \"------------------------****---------:::   Replies: \"$6\"  :::---------******--------------------------------\"}!/replies/{print}' |sed '/^textOriginal:/,/^authorDisplayName:/{/^authorDisplayName/!d}' |sed '/^authorProfileImageUrl:\\|^authorChannelUrl:\\|^authorChannelId:\\|^etag:\\|^updatedAt:\\|^parentId:\\|^id:/d' |sed 's/<[^>]*>//g' | sed 's/{textDisplay/{\\ntextDisplay/' |sed '/^snippet:/d' | awk -F\":\" '(NF==1){print \"========================================COMMENT===========================================\"}(NF>1){a=0; print $0}' | sed 's/textDisplay: //g' | sed 's/authorDisplayName/User/g' | sed 's/T[0-9]\\{2\\}:[0-9]\\{2\\}:[0-9]\\{2\\}Z//g' | sed 's/likeCount: /Likes:/g' | sed 's/publishedAt: //g' > output_file\n\nThe final result is a file called output_file with this format:\n========================================COMMENT===========================================\nThis is a comment\nUser: Robert Everest\nLikes:8, 2019-05-22\n========================================COMMENT===========================================\nThis is another comment\nUser: Anna Davis\nLikes:9, 2019-05-15\n------------------------****---------:::   Replies: 3,  :::---------******--------------------------------\nthis is first reply\nUser: John Doe\nLikes:2, 2020-09-15\nthe second replay\nUser: Caraqueno\nLikes:2, 2020-02-19\nA third reply\nUser: Rebeca\nLikes:2, 2019-07-03\n\nThe python script requires of the file token.pickle to work, it is generated the first time the python script run and when it expired, it have to be deleted and generated again.\n", "\nI had a similar issue that the OP does and managed to solve it, but someone in the community closed my question after I solved it and can't post there. I'm posting it here for fidelity.\nThe YouTube API doesn't allow users to grab nested replies to comments. What it does allow is you to get the replies to the comments and all the comments i.e. Video --> Comments --> Comment Replies ---> Reply To Reply et al. Knowing this limitation we can write code to get all the top Comments, and then break into those comments to get the first-level replies.\nModuels\nimport os\nimport googleapiclient.discovery #required for using googleapi\nimport pandas as pd #require for data munging. We use pd.json_normalize to create the tables\nimport numpy as np #just good to have\nimport json # the requests are returned as json objects. \nfrom datetime import datetime #good to have for date modification\n\nGet All Comments Function\nFor a given vidId, this function will get the first 100 comments and place them into a df. It then use a while loop to check to see if the response api contains nextPageToken. While it does, it will continue to run to get all the comments until either all the comments are pulled or you run out of credits, whichever happens first.\ndef vidcomments(vidId):\n    # Disable OAuthlib's HTTPS verification when running locally.\n    # *DO NOT* leave this option enabled in production.\n    os.environ[\"OAUTHLIB_INSECURE_TRANSPORT\"] = \"1\"\n\n    api_service_name = \"youtube\"\n    api_version = \"v3\"\n    DEVELOPER_KEY = \"yourapikey\" #<--- insert API key here\n\n    youtube = googleapiclient.discovery.build(\n        api_service_name, api_version, developerKey = DEVELOPER_KEY)\n\n    request = youtube.commentThreads().list(\n        part=\"snippet, replies\",\n        order=\"time\",\n        maxResults=100,\n        textFormat=\"plainText\",\n        videoId=vidId\n    )\n    \n    response = request.execute()\n    full = pd.json_normalize(response, record_path=['items'])\n    while response:\n        \n        if 'nextPageToken' in response:\n            response = youtube.commentThreads().list(\n                part=\"snippet\",\n                maxResults=100,\n                textFormat='plainText',\n                order='time',\n                videoId=vidId,\n                pageToken=response['nextPageToken']\n            ).execute()\n            \n            df2 = pd.json_normalize(response, record_path=['items'])\n            full = full.append(df2)\n            \n        else:\n            break\n    return full\n\nGet All Replies To Comments Function\nFor a particular parentId, get all the first-level replies. Like the vidcomments() function noted above, it will run until all replies to all comments are pulled or you run out of credits, whichever happens first.\n    def repliesto(parentId):\n        # Disable OAuthlib's HTTPS verification when running locally.\n        # *DO NOT* leave this option enabled in production.\n        os.environ[\"OAUTHLIB_INSECURE_TRANSPORT\"] = \"1\"\n\n        api_service_name = \"youtube\"\n        api_version = \"v3\"\n        DEVELOPER_KEY = DevKey #your dev key\n\n        youtube = googleapiclient.discovery.build(\n            api_service_name, api_version, developerKey = DEVELOPER_KEY)\n\n        request = youtube.comments().list(\n            part=\"snippet\",\n            maxResults=100,\n            parentId=parentId,\n            textFormat=\"plainText\"\n        )\n        response = request.execute()\n\n        replies = pd.json_normalize(response, record_path=['items'])\n        while response:\n\n            if 'nextPageToken' in response:\n                response = youtube.comments().list(\n                    part=\"snippet\",\n                    maxResults=100,\n                    parentId=parentId,\n                    textFormat=\"plainText\",\n                    pageToken=response['nextPageToken']                \n                ).execute()\n\n                df2 = pd.json_normalize(response, record_path=['items'])\n                replies = pd.concat([replies, df2], sort=False)\n\n            else:\n                break\n        return replies\n\n\nPutting It Together\nFirst, run the vidcomments function to get all the comments information. Then use the code below to get all the reply information using a for loop to pull in each topLevelComment.id into a list, then use the list and another for loop to build the replies dataframe. This will create two separate Dataframes, one for Comments and another for Replies. After creating both of these Dataframes you can then join them in a way that makes sense for your purpose, either concat/union or a join/merge.\n    replyto = []\n    for reply in full[(full['snippet.totalReplyCount']>0)] \n    ['snippet.topLevelComment.id']:\n        replyto.append(reply)\n\n    # create an empty DF to store all the replies\n    # use a for loop to place each item in our replyto list into the function defined above\n    \n    replies = pd.DataFrame()\n    for reply in replyto:\n        df = repliesto(reply)\n        replies = pd.concat([replies, df], ignore_index=True)\n\n"]}, {"type": 3, "title": "Scraping Youtube comments in R", "question": "\nI'm extracting user comments from a range of websites (like reddit.com) and Youtube is also another juicy source of information for me. My existing scraper is written in R:\n\nThis doesn't work on Youtube data, in fact if you look at the source of a Youtube video like this for example, you'd find that comments do not appear in the source.\nDoes anyone have any suggestions on how to extract data in such circumstances?\nMany thanks!\n", "answers": ["\nFollowing this Answer: R: rvest: scraping a dynamic ecommerce page\nYou can do the following:\ndevtools::install_github(\"ropensci/RSelenium\") # Install from github\n\nlibrary(RSelenium)\nlibrary(rvest)\npJS <- phantom(pjs_cmd = \"PATH TO phantomjs.exe\") # as i am using windows\nSys.sleep(5) # give the binary a moment\nremDr <- remoteDriver(browserName = 'phantomjs')\nremDr$open()\nremDr$navigate(\"https://www.youtube.com/watch?v=qRC4Vk6kisY\")\nremDr$getTitle()[[1]] # [1] \"YouTube\"\n\n# scroll down\nfor(i in 1:5){      \n  remDr$executeScript(paste(\"scroll(0,\",i*10000,\");\"))\n  Sys.sleep(3)    \n}\n\n# Get page source and parse it via rvest\npage_source <- remDr$getPageSource()\nauthor <- html(page_source[[1]]) %>% html_nodes(\".user-name\") %>% html_text()\ntext <- html(page_source[[1]]) %>% html_nodes(\".comment-text-content\") %>% html_text()\n\n#combine the data in a data.frame\ndat <- data.frame(author = author, text = text)\n\nResult:\n> head(dat)\n              author                                                                                       text\n1 Kikyo bunny simpie Omg I love fluffy puff she's so adorable when she was dancing on a rainbow it's so cute!!!\n2   Tatjana Celinska                                                                                     Ciao 0\n3      Yvette Austin                                                                   GET OUT OF MY\u00c2  HEAD!!!!\n4           Susan II                                                                             Watch narhwals\n5        Greg Ginger               who in the entire fandom never watched this, should be ashamed,\\n\\nPFFFTT!!!\n6        Arnav Sinha                                                                 LOL what the hell is this?\n\nComment 1: You do need the github version see rselenium | get youtube page source\nComment 2:\nThis code gives you the initial 44 comments. Some comments have a \"show all answers\" link that would have to click. Also to see even more comments you have to click the show more button at the bottom of the page.\nClicking is explined in this excelent RSelenium tutorial: \nhttp://cran.r-project.org/web/packages/RSelenium/vignettes/RSelenium-basics.html\n", "\nyou mentioned that the youtube comments do not appear in the html source code of a youtube page. However, I used to the developer tools build into Chrome, and I was able to see the html markup of that makes up the comments. I also tried loading the page with scripting blocked and the comments were still there. \nAssuming your parser can see the comments, the following xpath should allows you to select the content of the comments.\n\"//body//div[@class='comment-text-content']/text()\"\n\nAlternatively if you want to select all the information inside the comment block, such as the users name, you can use this expression\n\"//body/div[@class='comments']//div[@class='comment-item']\"\n\n"]}, {"type": 3, "title": "How to scrape youtube comments using BeautifulSoup", "question": "\nI am a newbie. i would like to know how to web scrape YouTube comments using BeautifulSoup . I am struck over here. can any one help me with the code.\nhere is what i have written :\n\nI was stuck here not getting any output, inspecting the wb page it showed comments has id = contents\n", "answers": ["\nThe comment of that site are generated dynamically. You can't get them using the main link making use of requests and BeautifulSoup library. To get the content tracking the above link you need to use any browser simulator like selenium. As a starter, you can try like below. The following script will fetch you the unwrapped comments. Btw, the site also has got lazyloading method active so you need to twitch the for loop to get more content.\nimport time\nfrom selenium.webdriver import Chrome\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\nwith Chrome() as driver:\n    wait = WebDriverWait(driver,10)\n    driver.get(\"https://www.youtube.com/watch?v=kffacxfA7G4\")\n\n    for item in range(3): #by increasing the highest range you can get more content\n        wait.until(EC.visibility_of_element_located((By.TAG_NAME, \"body\"))).send_keys(Keys.END)\n        time.sleep(3)\n\n    for comment in wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, \"#comment #content-text\"))):\n        print(comment.text)\n\nPartial output:\n15 April 2018 ?\u00bf?\nApril 2018??\n8 years people \ud83d\udc4c\nNice songs Justin Bieber https://youtu.be/OvfAc7JGoc4\n2018 hit like...\u2665\ufe0f\u2665\ufe0f\u2665\ufe0f\u2665\ufe0f\ud83d\ude01\ud83d\udc4c\ud83c\udffb\n8 years complete \ud83d\ude4f\nCan likes beat dislikes??\nView 1, 8 billion great song\n\n"]}, {"type": 3, "title": "YoutubeAPI get community comments", "question": "\nI want to get community comments on Youtube Api. I can get comments from the video, but there is no mention of the community. Please answer somebody.\n", "answers": []}, {"type": 3, "title": "Embed youtube comments and like", "question": "\nI was wondering if it's possible to embed youtube videos' comments and like button with the video? \nIf there is such thing, how can I do that or where can I get more info? Thanks\n", "answers": ["\nHere you can see an example of how to get and display the video comments\nGetting Youtube Video Information using javascript/jquery\nand in the Topic Explorer project you can see how to add a 'like' or add the video to your favorites:\nhttps://code.google.com/p/yt-topic-explorer/source/browse/app/views/main.html\n<button ng-click=\"addToList($event.target, 'likes', videoResult.id)\">{{'LIKE'|i18n}}</button>\n<button ng-click=\"addToList($event.target, 'favorites', videoResult.id)\">{{'FAVORITE'|i18n}}</button>\n\nand in:\nhttps://code.google.com/p/yt-topic-explorer/source/browse/app/scripts/controllers/main.js\n$scope.addToList = function(target, listName, videoId) {\n    var listId = $rootScope.relatedPlaylists[listName];\n\n    target.textContent = topicExplorerApp.filter.i18n('ADDING');\n    target.disabled = true;\n\n    youtube({\n      method: 'POST',\n      service: 'playlistItems',\n      params: {\n        part: 'snippet'\n      },\n      body: {\n        snippet: {\n          playlistId: listId,\n          resourceId: {\n            kind: constants.VIDEO_KIND,\n            videoId: videoId\n          }\n        }\n      },\n      callback: function(results) {\n        if ('error' in results) {\n          target.textContent = 'Error';\n        } else {\n          target.textContent = topicExplorerApp.filter.i18n('ADDED');\n        }\n      }\n    });\n  };\n\n", "\nYouTube does not have any embed code that you can use to embed comments. So basically there are 2 options to embed comments -\n1. Use the YouTube API to embed and post comments. This will need a good coding knowledge. \nTo get comments use this endpoint \nGET https://www.googleapis.com/youtube/v3/commentThreads\n\nTo add comments use this endpoint \nPOST https://www.googleapis.com/youtube/v3/playlistItems\n\n2. Or you can use a ready-made plugin that allows this functionality. Here is a small demo of the Youmax plugin that will list comments as well as allow you to add comments.\n", "\nEDITED: On Feb,2016 YT has stopped the solution bellow from working :-( I'll keep it here just for reference\nFOR THE COMMENTS:\nAs YT has deprecated the gdata for the comments url, you can scrape 'em also from here; its a workaround though :D\nhttps://www.youtube.com/all_comments?v=cOIKAnF3mjs\n\n...no authentication needed! :) and if you want to work the client side only (in this example by cross-domain), go through JS\n<textarea style=\"width:100%;height:100%\" id=cu></textarea>\n<script>\nvar r='';\nfunction c(d)\n            {\n            for(i=0;i<=d.query.count-1;i++)\n               r=r+d.results[i];\n            document.getElementById('cu').innerHTML=r;\n            }\n</script>\n<script src=\"http://query.yahooapis.com/v1/public/yql?q=%20SELECT%20*%20FROM%20html%20WHERE%20url%3D%22https://www.youtube.com/all_comments?v=cOIKAnF3mjs%22&callback=c\"></script>\n\n", "\nYou can Access YouTube Comments by processing this URL\nhttp://gdata.youtube.com/feeds/api/videos/{$videoID}/comments\nThe YouTube like functionality requires the user to be logged-in to his/hers Google account\n"]}, {"type": 3, "title": "How to crawl YouTube video id by using scrapy?", "question": "\nIf I don't use YouTube Data API, crawl data by using python scrapy. Can it be done ?\nI check the root step by step, but I have no idea why I get empty list. Dose YouTube block something on website ?\nI want to get href value 29UMdKC2ZTY from <a id=\"thumbnail\" />\n\nHere is what I try:\n\nsettings.py\n\n", "answers": ["\nI would suggest go for BS4 and helium instead Scrapy;  you will get Id's\nx = (soup.find_all('a','ytd-grid-video-renderer'))\nfor i in x:\n    print(i.text.encode(\"ascii\", \"ignore\").decode(\"utf-8\", \"ignore\").strip(),'\\t',urljoin(url,i.attrs['href']))\n\n", "\nYou xpath is incorrect. You can use //a[@id='thumbnail']/@href to get a list of thumbnails and iterate over them one by one.\n"]}, {"type": 3, "title": "Scraping tracks' links from YouTube playlist with Beautiful Soup", "question": "\nI am trying to scrape all links for tracks from my playlist.\nThis is my code\n\nI couldn't scrape 'a'; nor by id; nor by class name.\n\n", "answers": ["\nit's my messy code that works for me:\nfrom selenium import webdriver\nfrom time import sleep\nfrom bs4 import BeautifulSoup\nfrom urllib.request import urlopen\nimport re\n\nplaylist = 'minimal_house'\n\nurl = 'https://www.youtube.com/channel/UCt2GxiTBN_RiE-cbP0cmk5Q/playlists'\nhtml = urlopen(url)\nsoup = BeautifulSoup(html, 'html.parser')\ntracks = soup.find('a', attrs={'title': playlist}).get('href')\n\nprint(tracks)\n\nurl = 'https://www.youtube.com' + str(tracks)\nprint(url)\n\nhtml = urlopen(url)\n\nsoup = BeautifulSoup(html, 'html.parser')\n\nlinks = soup.find_all('a')\nlinks = set([link.get('href') for link in links if link.get('href').count('watch')])\n\nprint(links)\n\nsince class names change base on device request, it's better to get all links in this case.\nand you need to use selenium to scroll down to fetch all the list.\n"]}, {"type": 3, "title": "How to get all comments on a YouTube video?", "question": "\nSince Google has deprecated the YouTube v2 API, I cannot find a way to get all the comments from a video.\nIs it possible to use a single, non-deprecated API (Google+, YT v3) to do that?\nI am not concerned about maintaining threading.\n", "answers": ["\nBelieve me it works\nhttps://www.googleapis.com/youtube/v3/commentThreads?key=******************&textFormat=plainText&part=snippet&videoId=kffacxfA7G4&maxResults=50 \nKey will be provided by the google developer console and 50 denotes 50 comments in form of a json, video id is the id of the video. For any type of queries comment below.\n", "\nApparently it is now possible to fetch comment threads.\n\n(old answer)\nCurrently that's impossible with a first-party tool.\nSource:\n\nWhile v3 offers the majority of v2 functionality, there are currently\n  a couple of tasks that can only be done with the older API.\n  Specifically, applications that manage captions or that work with\n  video comments still need to use the v2 API until modern equivalents\n  are available. Our goal is to provide similar functionality well\n  before the April 2015 shut-off date\u2014please subscribe to this blog, the\n  YouTube Data API v3 revision history page, or follow +YouTubeDev on\n  Google+ to keep up-to-date. -\n  http://apiblog.youtube.com/2014/03/committing-to-youtube-data-api-v3.html\n\nTubeKit (YouTube crawling toolkit) might be of help to some.\n", "\nYou can get only 100 at most at a time with the comments API. But you get a nextPageToken from the comment api response. Pass &pageToken={nextPageToken} to next api call, until the nextPageToken is undefined. Then you can get all comments if you like. \nhttps://www.googleapis.com/youtube/v3/commentThreads?key={your_api_key}&textFormat=plainText&part=snippet&videoId={video_id}&maxResults=100&pageToken={nextPageToken}\n\n", "\nYou can fetch all the comments using https://www.googleapis.com/youtube/v3/commentThreads\nThe Youtube API v3.0 allows you the following parameters.\n\ntextFormat - This parameter indicates whether the API should return comments formatted as HTML or as plain text. The default value is html.\n\nvideoId - The Youtube Video ID you want to fetch comments for ( if you dont know your Youtube Video ID, you can get one from Youtube Video ID Finder )\n\nmaxResults - The maxResults parameter specifies the maximum number of items that should be returned in the result set.\n\npageToken - The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken property identifies the next page of the result that can be retrieved.\n\n\n", "\n$.ajax({\n        dataType: \"jsonp\",\n        type: 'GET',\nurl: \"https://www.googleapis.com/youtube/v3/commentThreads?key=PUT-YOUR-KEYXXXXXXX&textFormat=plainText&part=snippet&videoId=PUT-YOUR-VIDEO-ID\",\n        success: function(result){\n            data = result;\n            $('.data').text(data);\n            console.log(data);\n    }});\n\nTo find PUT-YOUR-KEY(API key) ---> https://console.developers.google.com/apis/credentials  then click on blue color button select API key option you can get\n"]}, {"type": 4, "title": "Visual studio does not create output file without any error message", "question": "\nI'm a computer science, and I have a project that needs to create an output file using c++. The coding is correct but the visual studio doesn't create the output file for me. To make sure is not a typo error, I tested my code using the C++ online compiler and the code is working file with the file output. I did ask my professor to help me with this problem he tested my code at his end, the file output created in his repository but somehow my visual studio doesn't create the output file, and the code was running fine no error message so far. I try to run it as an admin, restart my laptop and uninstall then reinstall the visual studio but nothing work. any help would be appreciated.\nMany thanks.\nhere is my code if anyone wonder\n\n", "answers": ["\nLike all other file opening functions, the ifstream& ofstream class uses the current directory when providing a relative path.\n\nFirst of all, I suggest you use an absolute path ofstream fout(\"D:\\\\testfolder\\\\output_1.txt\"); to test whether the file is created.\n\nFind the directory where your project is located to see if there are .txts.\n\nIf you don't find them, I suggest you search the two txt files in the whole disk.\n\n\nIf it still doesn't work, I suggest you reset the VS settings Tools->Import and Export Settings->Reset all settings.\n\n"]}, {"type": 4, "title": "Save R output to a different directory", "question": "\nI am running some R code on a Windows computer using RStudio and my code generates Excel files and netCDF files periodically (dozens of them eventually). I don't want them to clutter my working directory. Is there a way to save the files to a directory called \"Output\" (ex:  C:/.../original file path/Output) in the parent directory? I would like a way to change my current working directory to a different directory. I understand there is getwd() and setwd() but how do I set the path to the output directory without typing out the entire windows path (for example: setwd(current source file path for windows or Mac/output). My collaborator uses a Mac and he would have his output stored there as well.\n", "answers": ["\nYou have a file argument in your write* function. If your Output directory is in your working directory, it works like this:\nwrite.xlsx(df, file = \"Output/table.xlsx\")\nwrite.csv(df, file = \"Output/table.csv\")\n\n", "\nYou can specify an argument in your write.csv function and other similar write functions which specifies your path.\n#Output path\nOutPath<- \"C:/blah/blahblah/op/\"\n\n#Table to dump as output\nOutTbl <- iris \n\nwrite.csv(OutTbl, file = OutPath)\n\nSource: https://stat.ethz.ch/R-manual/R-devel/library/utils/html/write.table.html\n"]}, {"type": 4, "title": "FPDF error: Unable to create output file", "question": "\nI am facing this strange problem with PHP upload script. Hoping to get some help from someone please.\nBelow is the details of this problem: \nDOCUMENT_ROOT is \"/var/www/html\"\nPHP upload works fine to a folder called \"/var/www/html/uploads\"\nHave Another directory hosting different webpage at \"/var/www/html/folder\"\nSame PHP upload.sh script can not upload files to \"/var/www/html/directory/folder\" directory.\nFolder permission has been set to 0777 to both \"/var/www/html/directory/folder\" and \"/var/www/html/uploads\"\nSame upload script is used in both folders.\nBelow value is set in upload.php located in both folders.\n\nI have tried setting absolute path in $uploads as follows but did not work:\n\nUpload is failing with below error:\n\nAny idea why the server is not letting upload.php from \"/var/www/html/folder\" to write to \"/var/www/html/folder/uploads/\" directory.\nNo related message could be found in any log files.\n============================================================= \nIt appreas that PHP is not able to mkdir in /var/www/html/folder/uploads/files/.\nPiece of code that creates the directory is:\n\nAny idea why it is unsable to to do so with the above mkdir code?\nThank you.\n", "answers": ["\nmake sure that file /var/www/html/folder/uploads/files/filename.pdf is not open anywhere when you run script. if it's open somewhere else then TCPDF can't open it.\n", "\nFor those who are facing similar problems, my issue was resolved after adding recursive flag. My mkdir command was changed as follows:\nFrom:\nif (!is_dir($dir)) @mkdir($dir, 0777);\n\nTo:\nif (!is_dir($dir)) @mkdir($dir, 0777, true);\n\n"]}, {"type": 4, "title": "Mahout : output file giving error in Hadoop", "question": "\nI am getting the following error while running Mahout on Hadoop.\nCommand:\n\nError :\n\nBut I couldn't find any output folder created :\n\nHow to solve this ?\nMahout Version :0.11.0\n", "answers": ["\nI was facing same issue. Found solution to this. \nMahout gives error if output file directory or tempDir already exists. So first delete and then execute command. Also use custom --tempDir option and set temporary directory for output generation. Otherwise it will generate temp folder at location where you are executing command. If you don't want to have custom tempDir then delete temp/ directory before you are executing command.\nrm -rf /user/op /tmp/mahout/ && mahout recommenditembased -s SIMILARITY_LOGLIKELIHOOD -i /user/inp -o /user/op --tempDir /tmp/mahout/ --numRecommendations 5\n\n"]}, {"type": 4, "title": "Output file to server directory in FPDF", "question": "\nI'm using PHP to put together a PDF using FPDF, right at the bottom I have this:\n\nThe top line should save the PDF to the uploads folder in the root, and the bottom should show it in the browser. I get this message:\n\nI've even tried making the file path using a variable as suggested in other posts on this site but I still get the same error. I have 777 permissions set throughout the uploads folder too. Thanks.\n", "answers": ["\nI've actually figured it out, it's a weird fix but it works.\n$path = \"../../../../uploads/AAA.pdf\";\n$pdf->Output($path,'F');\nheader('location:'.$path);\n\nI had to keep jumping back to the root, then go into the /uploads/ folder specifically. Thanks for the answers so far.\n", "\n$path=$_SERVER['DOCUMENT_ROOT'].\"/unwant/test3.pdf\";\n$pdf->Output($path,'F');\n\nuse this code easy to save file dir\n"]}, {"type": 4, "title": "could not create output file\"\"", "question": "\nI was trying to compile and project file ,taken freshly from the VSS and\nit was throwing an error\n\nStrangely the error was pointing to line \"90\" where as the last line of code in the error-file (emsDataAccess.pas) is\"75\".\nKindly help!\nRegards\n-Vas\n", "answers": ["\nDoes your release subdirectory exist? The compiler won't create it for you, and if it's not in the VSS repository chances are it's missing in a fresh checkout.\n", "\nIt probably points you to \"line 90\" of the build script.\nIt's simply a \"cannot create file\" error, so either the Path is invalid, you don't have the rights to create files or folders or maybe emsDataAccess.dcu was checked out as read-only.\nJust use explorer to see if the folder and/or file already exist. Delete the file if you find it.\n"]}, {"type": 4, "title": "TCPDF unable to output file by saving. Path on Mac?", "question": "\nI checked some similar questions here, but i didn't got an answer, solving my problem.\nI use TCPDF to generate a PDF with PHP.\nWhen I use the $pdf->Output($file_total, 'I');\nit's all good and the file is shown in Browser.\nIf I use the save to localhost option $pdf->Output($file_total, 'F'); I get this error:\n\"failed to open stream: Permission denied in /opt/lampp/htdocs/project/tcpdf_min/include/tcpdf_static.php on line 1821\"\n\"TCPDF ERROR: Unable to create output file\"\nThe Path I set for saving the PDF file is: \"/opt/lampp/htdocs/project/files/2021\"\nWhat am I doing wrong? is my path wrong?\nThe forced saving $pdf->Output($file_total, 'D'); works just fine, so i must doing something wrong with the path on mac...\nplease help!\nThanks\n", "answers": ["\nIn comments we both went through possible reasons such as finding an absolute rather than relative location and checking out folder permissions for non admin process as that was also suspected. Thus between us the conclusion was:-\nuse address as\n\"localhost:8080/projects...\"\nand ensure target folder was set to permissions\n\"read/write\" for all users\nFor production use the write access needs to be trimmed back to the process and admin, not all users.\n"]}, {"type": 4, "title": "jhipster application files generated in wrong directory", "question": "\nWhen I try to create a jhipster application in ubuntu 13.10 with yo jhipster the generated output files are always dumped in the wrong directory.\nFor example I run yo jhipster in the directory /mnt/mercury/jhipster-test/alpha then the files are dumped out to /mnt/mercury. In fact if I run yo jhipster in any subdirectory of /mnt/mercury they are always dumped out to /mnt/mercury. \nI'm using yo version 1.1.2 from the standard ubuntu repository\nPlease advise how to generate files to be output in current directory.\nFor the benefit of anyone else facing this problem.\nI managed to get Yeoman working with the following\n\n", "answers": ["\nMy problem: Accidentally \"yo generating\" in the parent directory.\nSolution: Delete the .yo-rc.json file in the parent directory, then running the yo generator command in the child directory.\n", "\nAs discussed in the comments, this is a Yeoman problem on Ubuntu 13.10:\n\nWe don't have this issue with Ubuntu 12.04\nThere is the same issue with other generators (\"yo webapp\") on Ubuntu 13.10\n\nAs a workaround, I recommend you have a look at our Docker container:\nhttps://github.com/jhipster/jhipster-docker\nThis will allow you to run the full JHipster stack, with Ubuntu 12.04, inside a container! Just use it to generate the app, then you can work directly on your host machine.\n", "\nOn Mac OSX Maverick with Node v0.10.26, yo v1.1.2 and generator-jhipster v0.11, the yo hipster command was generating all the sources always in the same (wrong!) directory and not using my current directory.\nI fixed this problem doing the following:\n cd <WRONG_DIR_WHERE_CODE_IS_CREATED>\n rm .yo-rc.json node_modules/  \n npm uninstall -g karma\n npm install -g karma (Note: using sudo it was not working!)\n sudo npm install -g generator-jhipster\n\nNot sure why but I've then been able to install karma and generator-jhipster again and suddenly yo hipster starting generating code again in my current directory\nCould it be caused by different environment variables when launching npm with sudo?  \n", "\nThe file .yo-rc.json is hidden, if it is not deleted, the generator will constantly take the settings from it. You must delete .yo-rc.json.\n"]}, {"type": 4, "title": "Saving script output in a file but showing the output on the terminal too [duplicate]", "question": "\n\n\n\n\n\n\nThis question already has answers here:\n                        \n                    \n\n\n\nHow to redirect output to a file and stdout\n\n                                (11 answers)\n                            \n\nClosed 5 months ago.\n\n\n\nI have a small workflow formed by one run.sh script that automates a few scripts.\nIn this run.sh I have a function to run some INFO and ERROR messages and save it in a log.txt file but the scripts also generate outputs. I would like to save these outputs in another log file and also see the output when I run the pipeline.\nI run my pipeline with this command.\n\nI have seen I can do that as explained in this link\nBut as long as I know this will not show me the output in the terminal.\nHow can I get output in the terminal and also save it in a file? I am using a cluster computer and the output in the terminal is not saved if I lost the conection or log off from my PC.\n", "answers": ["\nYou know about tee?\nSomething like...\nrun.sh -f1 a file -f2 other file -d a/directory | tee output.txt\n\n...would run your script and show the standard output, while at the same time store it in output.txt\n"]}, {"type": 5, "title": "using selenium without browser screen - python windows", "question": "\ni use selenium for instagram appicatin.\ni wonder there is any way to run selenium without browser opening in windows?\nthere is some solution in linux like install Xvfb but i don't see any solution for windows!\n", "answers": ["\nDo you mean that --headless?\nYou can do some operations without opening Chrome if you have chrome-driver.\nHere is how to set headless:\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nchromeoption = Options()\nchromeoption.add_argument('--headless')\nbrowser = webdriver.Chrome(options=chromeoption)\n\n# Then it is your work.\nbrowser.get(url=\"xxx\")\n\n"]}, {"type": 5, "title": "Can Selenium WebDriver open browser windows silently in the background?", "question": "\nI have a Selenium test suite that runs many tests and on each new test it opens a browser window on top of any other windows I have open. Very jarring while working in a local environment. Is there a way to tell Selenium or the OS (Mac) to open the windows in the background?\n", "answers": ["\nIf you are using Selenium web driver with Python, you can use PyVirtualDisplay, a Python wrapper for Xvfb and Xephyr.\nPyVirtualDisplay needs Xvfb as a dependency. On Ubuntu, first install Xvfb:\nsudo apt-get install xvfb\n\nThen install PyVirtualDisplay from PyPI:\npip install pyvirtualdisplay\n\nSample Selenium script in Python in a headless mode with PyVirtualDisplay:\n    #!/usr/bin/env python\n\n    from pyvirtualdisplay import Display\n    from selenium import webdriver\n\n    display = Display(visible=0, size=(800, 600))\n    display.start()\n\n    # Now Firefox will run in a virtual display.\n    # You will not see the browser.\n    browser = webdriver.Firefox()\n    browser.get('http://www.google.com')\n    print browser.title\n    browser.quit()\n\n    display.stop()\n\nEDIT\nThe initial answer was posted in 2014 and now we are at the cusp of 2018. Like everything else, browsers have also advanced. Chrome has a completely headless version now which eliminates the need to use any third-party libraries to hide the UI window. Sample code is as follows:\n    from selenium import webdriver\n    from selenium.webdriver.chrome.options import Options\n\n    CHROME_PATH = '/usr/bin/google-chrome'\n    CHROMEDRIVER_PATH = '/usr/bin/chromedriver'\n    WINDOW_SIZE = \"1920,1080\"\n\n    chrome_options = Options()\n    chrome_options.add_argument(\"--headless\")\n    chrome_options.add_argument(\"--window-size=%s\" % WINDOW_SIZE)\n    chrome_options.binary_location = CHROME_PATH\n\n    driver = webdriver.Chrome(executable_path=CHROMEDRIVER_PATH,\n                              chrome_options=chrome_options\n                             )\n    driver.get(\"https://www.google.com\")\n    driver.get_screenshot_as_file(\"capture.png\")\n    driver.close()\n\n", "\nThere are a few ways, but it isn't a simple \"set a configuration value\". Unless you invest in a headless browser, which doesn't suit everyone's requirements, it is a little bit of a hack:\nHow to hide Firefox window (Selenium WebDriver)?\nand\nIs it possible to hide the browser in Selenium RC?\nYou can 'supposedly', pass in some parameters into Chrome, specifically: --no-startup-window\nNote that for some browsers, especially Internet\u00a0Explorer, it will hurt your tests to not have it run in focus.\nYou can also hack about a bit with AutoIt, to hide the window once it's opened.\n", "\nChrome 57 has an option to pass the --headless flag, which makes the window invisible. \nThis flag is different from the --no-startup-window as the last doesn't launch a window. It is used for hosting background apps, as this page says.\nJava code to pass the flag to Selenium webdriver (ChromeDriver):\nChromeOptions options = new ChromeOptions();\noptions.addArguments(\"--headless\");\nChromeDriver chromeDriver = new ChromeDriver(options);\n\n", "\nFor running without any browser, you can run it in headless mode.\nI show you one example in Python that is working for me right now\nfrom selenium import webdriver\n\n\noptions = webdriver.ChromeOptions()\noptions.add_argument(\"headless\")\nself.driver = webdriver.Chrome(executable_path='/Users/${userName}/Drivers/chromedriver', chrome_options=options)\n\nI also add you a bit more of info about this in the official Google website https://developers.google.com/web/updates/2017/04/headless-chrome\n", "\nI used this code for Firefox in Windows and got answer(reference here):\nfrom selenium import webdriver\nfrom selenium.webdriver.firefox.options import Options\n\nOptions = Options()\nOptions.headless = True\n\nDriver = webdriver.Firefox(options=Options, executable_path='geckodriver.exe')\nDriver.get(...)\n...\n\nBut I didn't test it for other browsers.\n", "\nSince Chrome 57 you have the headless argument:\nvar options = new ChromeOptions();\noptions.AddArguments(\"headless\");\nusing (IWebDriver driver = new ChromeDriver(options))\n{\n    // The rest of your tests\n}\n\nThe headless mode of Chrome performs 30.97% better than the UI version. The other headless driver PhantomJS delivers 34.92% better than the Chrome's headless mode.\nPhantomJSDriver\nusing (IWebDriver driver = new PhantomJSDriver())\n{\n     // The rest of your test\n}\n\nThe headless mode of Mozilla Firefox performs 3.68% better than the UI version. This is a disappointment since the Chrome's headless mode achieves > 30% better time than the UI one. The other headless driver PhantomJS delivers 34.92% better than the Chrome's headless mode. Surprisingly for me, the Edge browser beats all of them.\nvar options = new FirefoxOptions();\noptions.AddArguments(\"--headless\");\n{\n    // The rest of your test\n}\n\nThis is available from Firefox 57+\nThe headless mode of Mozilla Firefox performs 3.68% better than the UI version. This is a disappointment since the Chrome's headless mode achieves > 30% better time than the UI one. The other headless driver PhantomJS delivers 34.92% better than the Chrome's headless mode. Surprisingly for me, the Edge browser beats all of them.\n\nNote: PhantomJS is not maintained any more!\n\n", "\nOn Windows you can use win32gui:\nimport win32gui\nimport win32con\nimport subprocess\n\nclass HideFox:\n    def __init__(self, exe='firefox.exe'):\n        self.exe = exe\n        self.get_hwnd()\n\n    def get_hwnd(self):\n      win_name = get_win_name(self.exe)\n      self.hwnd = win32gui.FindWindow(0,win_name)\n\n    def hide(self):\n        win32gui.ShowWindow(self.hwnd, win32con.SW_MINIMIZE)\n        win32gui.ShowWindow(self.hwnd, win32con.SW_HIDE)\n\n    def show(self):\n        win32gui.ShowWindow(self.hwnd, win32con.SW_SHOW)\n        win32gui.ShowWindow(self.hwnd, win32con.SW_MAXIMIZE)\n\ndef get_win_name(exe):\n    ''' Simple function that gets the window name of the process with the given name'''\n    info = subprocess.STARTUPINFO()\n    info.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n    raw = subprocess.check_output('tasklist /v /fo csv', startupinfo=info).split('\\n')[1:-1]\n    for proc in raw:\n        try:\n            proc = eval('[' + proc + ']')\n            if proc[0] == exe:\n                return proc[8]\n        except:\n            pass\n    raise ValueError('Could not find a process with name ' + exe)\n\nExample:\nhider = HideFox('firefox.exe') # Can be anything, e.q., phantomjs.exe, notepad.exe, etc.\n# To hide the window\nhider.hide()\n# To show again\nhider.show()\n\nHowever, there is one problem with this solution - using send_keys method makes the window show up. You can deal with it by using JavaScript which does not show a window:\ndef send_keys_without_opening_window(id_of_the_element, keys)\n    YourWebdriver.execute_script(\"document.getElementById('\" + id_of_the_element + \"').value = '\" + keys + \"';\")\n\n", "\nI suggest using PhantomJS. For more information, you may visit the Phantom Official Website.\n\nAs far as I know PhantomJS works only with Firefox...\n\nAfter downloading PhantomJs.exe you need to import it to your project as you can see in the picture below PhantomJS.\nI have placed mine inside:  common \u2192 Library \u2192 phantomjs.exe\n\nNow all you have to do inside your Selenium code is to change the line\nbrowser = webdriver.Firefox()\n\nTo something like\nimport os\npath2phantom = os.getcwd() + \"\\common\\Library\\phantomjs.exe\"\nbrowser = webdriver.PhantomJS(path2phantom)\n\n\nThe path to PhantomJS may be different... change as you like :)\n\nThis hack worked for me, and I'm pretty sure it will work for u too ;)\n", "\nIt may be in options. Here is the identical Java code.\n        ChromeOptions chromeOptions = new ChromeOptions();\n        chromeOptions.setHeadless(true);\n        WebDriver driver = new ChromeDriver(chromeOptions);\n\n", "\nIf you are using the Google Chrome driver, you can use this very simple code (it worked for me):\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\nchrome_options = Options()\nchrome_options.add_argument(\"--headless\")\ndriver = webdriver.Chrome('chromedriver2_win32/chromedriver.exe', options=chrome_options)\ndriver.get('https://www.anywebsite.com')\n\n", "\nThis is a simple Node.js solution that works in the new version 4.x (maybe also 3.x) of Selenium.\nChrome\nconst { Builder } = require('selenium-webdriver')\nconst chrome = require('selenium-webdriver/chrome');\n\nlet driver = await new Builder().forBrowser('chrome').setChromeOptions(new chrome.Options().headless()).build()\n\nawait driver.get('https://example.com')\n\nFirefox\nconst { Builder } = require('selenium-webdriver')\nconst firefox = require('selenium-webdriver/firefox');\n\nlet driver = await new Builder().forBrowser('firefox').setFirefoxOptions(new firefox.Options().headless()).build()\n\nawait driver.get('https://example.com')\n\nThe whole thing just runs in the background. It is exactly what we want.\n", "\nOn *nix, you can also run a headless X Window server like Xvfb and point the DISPLAY environment variable to it:\nFake X server for testing?\n", "\nOne way to achieve this is by running the browser in headless mode. Another advantage of this is that tests are executed faster.\nPlease find the code below to set headless mode in the Chrome browser.\npackage chrome;\n\npublic class HeadlessTesting {\n\n    public static void main(String[] args) throws IOException {\n        System.setProperty(\"webdriver.chrome.driver\",\n                \"ChromeDriverPath\");\n        ChromeOptions options = new ChromeOptions();\n        options.addArguments(\"headless\");\n        options.addArguments(\"window-size=1200x600\");\n        WebDriver driver = new ChromeDriver(options);\n        driver.get(\"https://contentstack.built.io\");\n        driver.get(\"https://www.google.co.in/\");\n        System.out.println(\"title is: \" + driver.getTitle());\n        File scrFile = ((TakesScreenshot) driver)\n                .getScreenshotAs(OutputType.FILE);\n        FileUtils.copyFile(scrFile, new File(\"pathTOSaveFile\"));\n        driver.quit();\n    }\n}\n\n", "\nIf you are using Ubuntu (Gnome), one simple workaround is to install Gnome extension auto-move-window: https://extensions.gnome.org/extension/16/auto-move-windows/\nThen set the browser (eg. Chrome) to another workspace (eg. Workspace 2). The browser will silently run in other workspace and not bother you anymore. You can still use Chrome in your workspace without any interruption.\n", "\nHere is a .NET solution that worked for me:\nDownload PhantomJS at http://phantomjs.org/download.html.\nCopy the .exe file from the bin folder in the download folder and paste it to the bin debug/release folder of your Visual Studio project.\nAdd this using\nusing OpenQA.Selenium.PhantomJS;\n\nIn your code, open the driver like this:\nPhantomJSDriver driver = new PhantomJSDriver();\nusing (driver)\n{\n   driver.Navigate().GoToUrl(\"http://testing-ground.scraping.pro/login\");\n   // Your code here\n}\n\n", "\nI had the same problem with my chromedriver using Python and options.add_argument(\"headless\") did not work for me, but then I realized how to fix it so I bring it in the code below:\nopt = webdriver.ChromeOptions()\nopt.arguments.append(\"headless\")\n\n", "\nJust add a simple \"headless\" option argument.\nfrom selenium import webdriver\n\noptions = webdriver.ChromeOptions()\noptions.add_argument(\"--headless\")\ndriver = webdriver.Chrome(\"PATH_TO_DRIVER\", options=options)\n\n", "\nUse it ...\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\noptions = Options()\noptions.headless = True\ndriver = webdriver.Chrome(CHROMEDRIVER_PATH, chrome_options=options)\n\n"]}, {"type": 5, "title": "Selenium testing without browser", "question": "\nI use Selenium RC for testing. Now to perform a load test, I want to run parallel test cases.\nIs there any way to run them without opening a browser?\n", "answers": ["\nChrome now has a headless mode:\nop = webdriver.ChromeOptions()\nop.add_argument('headless')\ndriver = webdriver.Chrome(options=op)\n\n", "\nTry this code:\nop = webdriver.ChromeOptions()\nop.add_argument('headless')\ndriver = webdriver.Chrome(options=op)\n\n", "\nTo set up on Centos (do all installation as root)\nInstall pip Download https://bootstrap.pypa.io/get-pip.py\npython get-pip.py\n\nInstalling selenium\nIf you have pip on your system, you can simply install or upgrade the Python bindings:\n    pip install -U selenium\nAlternately, you can download the source distribution from PyPI (e.g. selenium-2.53.1.tar.gz), unarchive it, and run:\npython setup.py install\n\ninstall the program: pyvirtualdisplay\npip install pyvirtualdisplay\n\nyum install Xvfb libXfont Xorg\n\nThen modify your script to add the bold lines within ** and **\n**from pyvirtualdisplay import Display**\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.support.ui import Select\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium.common.exceptions import NoAlertPresentException\nimport unittest, time, re\n\nclass SeleniumDemo(unittest.TestCase):\n\n    def setUp(self):\n        **self.display = Display(visible=0, size=(800, 600))\n        self.display.start()**\n        self.driver = webdriver.Firefox()\n        self.driver.implicitly_wait(30)\n        self.base_url = \"http://www.soastastore.com/\"\n        self.verificationErrors = []\n        self.accept_next_alert = True\n\n\n    def tearDown(self):`enter code here`\n        self.driver.quit()\n        ***self.display.stop()***\n        self.assertEqual([], self.verificationErrors)\n\n", "\nYou can run Selenium headless, take a look at this question/answer: Is it possible to hide the browser in Selenium RC?\nEspecially for performance load tests, you should have a look at \nApache JMeter.\n", "\nSince PhantomJS has been deprecated, using headless versions of Firefox would be a viable option.\nfrom selenium import webdriver\nfrom selenium.webdriver.firefox.options import Options\n\noptions = Options()\noptions.add_argument(\"--headless\")\ndriver = webdriver.Firefox(options=options)\ndriver.get('https://www.google.com/')\n\n", "\nAlways follow the Documentation. Here is what selenium doc says. It provide a standalone jar. \n\nDownload the standalone jar. And run it with command \njava -jar selenium-server-standalone.jar\n\nNow you will see a stanalone server started.\nNow set up your webdriver like below and rest part will be as it is.\ndriver = webdriver.Remote(command_executor='http://127.0.0.1:4444/wd/hub', desired_capabilities={'browserName': 'htmlunit', 'version': '2', 'javascriptEnabled': True})\n\nSummary code will be like.\nfrom selenium import webdriver\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Remote(command_executor='http://127.0.0.1:4444/wd/hub', \ndesired_capabilities={'browserName': 'htmlunit', 'version': '2', \n'javascriptEnabled': True})\ndriver.get(\"http://www.python.org\")\nassert \"Python\" in driver.title\nelem = driver.find_element_by_name(\"q\")\nelem.clear()\nelem.send_keys(\"pycon\")\nelem.send_keys(Keys.RETURN)\nassert \"No results found.\" not in driver.page_source\ndriver.close()\n\n\n", "\nIt is possible, but not with the standard firefox driver / chrome / etc.\nYou would need to install PhantomJS. Just assign your WebDriver to an instance of phantomJS driver:\ndriver = webdriver.PhantomJS()\n\nIf you run your code now, no browser window will be opened.\n", "\nYou can import Options if you don't want to open a web browser.\nfrom selenium import webdriver   # for webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait  # for implicit and explict waits\nfrom selenium.webdriver.chrome.options import Options  # for suppressing the browser\n\nThen in the code:\noption = webdriver.ChromeOptions()\noption.add_argument('headless')\ndriver = webdriver.Chrome(options=option)\n\nAnd continue with the rest of the program.\n", "\nrequirements:\nsudo apt-get install xvfb\npip install selenium\npip install PyVirtualDisplay\n\ndownload chrome driver binary from below link and paste into drivers directory: https://sites.google.com/a/chromium.org/chromedriver/downloads\ncode:\nfrom selenium import webdriver\nfrom pyvirtualdisplay import Display\n\nwith Display(visible=False, size=(800, 600)):\n    browser = webdriver.Chrome('drivers/chromedriver')\n    browser.get('https://www.example.com')\n    print(browser.page_source)\n    browser.quit()\n\n"]}, {"type": 5, "title": "How could I use selenium without actually open the browser and get the table content? Python", "question": "\nI am trying to run a python program in a web database to get the results table. My question is how could I get the results without actually opening a browser? And is there an easier way to get the table results? I want to get the bottom table value(e.g.BCS class, solubility, dose.etc.). (The bottom part of the results does not have td.text come along, so I cannot use the find next sibling command.) Thank you! Here is my code:\n\n", "answers": ["\nYou could try adding the --headless argument to ChromeOptions to tell the browser to not render.\nfrom selenium.webdriver.chrome.options import Options\n\nchrome_options = Options()\nchrome_options.add_argument(\"--headless\")\ndriver = webdriver.Chrome(chrome_options=chrome_options)\n\n", "\nYou can use requests module. There's a problem to get BCS Class (logP) text because HTML is broken in both BCS Class table data. Solution is to use html5lib as a parser.\nimport requests\nfrom bs4 import BeautifulSoup\nimport re\n\nheaders = {\n    'Connection': 'keep-alive',\n    'Pragma': 'no-cache',\n    'Cache-Control': 'no-cache',\n    'Origin': 'http://www.ddfint.net',\n    'Upgrade-Insecure-Requests': '1',\n    'DNT': '1',\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) '\n                  'Chrome/77.0.3865.90 Safari/537.36',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,'\n              'application/signed-exchange;v=b3',\n    'Referer': 'http://www.ddfint.net/search.cfm',\n    'Accept-Encoding': 'gzip, deflate',\n    'Accept-Language': 'ru,en-US;q=0.9,en;q=0.8,tr;q=0.7',\n}\n\ndata = {\n    'compoundName': 'Abacavir',\n    'category': '',\n    'subcategory': '',\n    'Submit': 'Search'\n}\n\nresponse = requests.post('http://www.ddfint.net/results.cfm', headers=headers, data=data, verify=False)\npage = BeautifulSoup(response.text, 'html5lib')\nprint(page.find(\"td\", text=\"Lowest Solubility (mg/ml):\").find_next_sibling(\"td\").text)\n\n# get header row\nheader_row = page.find(\"td\", text=\"Country List:\").find_parent(\"tr\")\n# get columns names, remove : and *\nheader_data = [re.sub(\"[:*]\", \"\", td.text.strip()) for td in header_row.find_all(\"td\")]\n\ncountry_index = header_data.index(\"Country List\")\nsolubility_index = header_data.index(\"Solubility\")\nbcs_class_clogp_index = header_data.index(\"BCS Class (cLogP)\")\nbcs_class_logp_index = header_data.index(\"BCS Class (logP)\")\n\nrow = header_row\nwhile True:\n    # check if next row exist\n    row = row.find_next_sibling(\"tr\")\n    if not row:\n        break\n\n    # collect row data\n    row_data = [td.text.strip() for td in row.find_all(\"td\")]\n    print(row_data[country_index], row_data[solubility_index],\n          row_data[bcs_class_clogp_index], row_data[bcs_class_logp_index])\n\n\nCode with pandas:\nimport requests\nfrom bs4 import BeautifulSoup\nimport re\nimport pandas as pd\n\nheaders = {\n    'Connection': 'keep-alive',\n    'Pragma': 'no-cache',\n    'Cache-Control': 'no-cache',\n    'Origin': 'http://www.ddfint.net',\n    'Upgrade-Insecure-Requests': '1',\n    'DNT': '1',\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) '\n                  'Chrome/77.0.3865.90 Safari/537.36',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,'\n              'application/signed-exchange;v=b3',\n    'Referer': 'http://www.ddfint.net/search.cfm',\n    'Accept-Encoding': 'gzip, deflate',\n    'Accept-Language': 'ru,en-US;q=0.9,en;q=0.8,tr;q=0.7',\n}\n\ndata = {\n    'compoundName': 'Abacavir',\n    'category': '',\n    'subcategory': '',\n    'Submit': 'Search'\n}\n\nresponse = requests.post('http://www.ddfint.net/results.cfm', headers=headers, data=data, verify=False)\npage = BeautifulSoup(response.text, 'html5lib')\nprint(page.find(\"td\", text=\"Lowest Solubility (mg/ml):\").find_next_sibling(\"td\").text)\n\n# get header row\nheader_row = page.find(\"td\", text=\"Country List:\").find_parent(\"tr\")\n# get columns names, and remove : and *\nheader_data = [re.sub(\"[:*]\", \"\", td.text.strip()) for td in header_row.find_all(\"td\")]\n\n# loop while there's row after header row\ndata = []\nrow = header_row\nwhile True:\n    # check if next row exist\n    row = row.find_next_sibling(\"tr\")\n    if not row:\n        break\n\n    # collect row data\n    row_data = [td.text.strip() for td in row.find_all(\"td\")]\n    data.append(row_data)\n\n# create data frame\ndf = pd.DataFrame(data, columns=header_data)\n\n", "\nYou can make the selenium headless by adding an option (--headless) like that:\nfrom selenium.webdriver.chrome.options import Options\nchrome_options = Options()\nchrome_options.add_argument(\"--headless\")\ndriver = webdriver.Chrome(chrome_options=chrome_options)\n\nand about iteration through a table, you can select all table rows and take only the relevant one like this:\nfrom selenium.webdriver.common.by import By\nrows = table_id.find_elements(By.TAG_NAME, \"tr\")\nmyrow = rows[5]\n\n"]}, {"type": 5, "title": "Is there a way to hide the browser while running selenium in Python?", "question": "\nI am working on a project with selenium to scrape the data, but I don't want the browser to open and pop up. I just wanted to hide the browser and also not to display it in the taskbar also... \nSome also suggested to use phantomJS but I didn't get them. What to do now ...\n", "answers": ["\nIf you're using Chrome you can just set the headless argument like so:\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\ndriver_exe = 'chromedriver'\noptions = Options()\noptions.add_argument(\"--headless\")\ndriver = webdriver.Chrome(driver_exe, options=options)\n\n", "\nFor chrome you could pass in the --headless parameter.\nAlternatively you could let selenium work on a virtual display like this:\nfrom selenium import webdriver\nfrom xvfbwrapper import Xvfb\n\ndisplay = Xvfb()\ndisplay.start()\n\ndriver = webdriver.Chrome()\ndriver.get('http://www.stackoverflow.com')\n\nprint(driver.title)\ndriver.quit()\n\ndisplay.stop()\n\nThe latter has worked for me quite well.\n", "\nTo hide the browser while executing tests using Selenium's python you  can use the minimize_window() method which eventually minimizes/pushes the Chrome Browsing Context effectively to the background using the following solution:\nfrom selenium import webdriver\n\noptions = webdriver.ChromeOptions()\noptions.add_argument(\"--start-maximized\")\noptions.add_experimental_option(\"excludeSwitches\", [\"enable-automation\"])\noptions.add_experimental_option('useAutomationExtension', False)\ndriver = webdriver.Chrome(chrome_options=options, executable_path=r'C:\\Utility\\BrowserDrivers\\chromedriver.exe')\ndriver.get('https://www.google.co.in')\ndriver.minimize_window()\n\n\nAlternative\nAs an alternative you can use the headless attribute to configure ChromeDriver to initiate google-chrome browser in Headless mode using Selenium and you can find a couple of relevant discussions in:\n\nHow to configure ChromeDriver to initiate Chrome browser in Headless mode through Selenium?\n\n", "\nIf you're using Firefox, try this:\nfrom selenium import webdriver\nfrom selenium.webdriver.firefox.options import Options\n\ndriver_exe = 'path/to/firefoxdriver'\noptions = Options()\noptions.add_argument(\"--headless\")\ndriver = webdriver.Firefox(driver_exe, options=options)\n\nsimilar to what @Meshi answered in case of Chrome\n", "\nif you want to hide chrome or selenium  driver there is a library pyautogui\nimport pyautogui\n\nwindow = [ x for x in pyautogui.getAllWindows()]\n\nby this, you are getting all window  title\nnow  you need to find your window\nfor i in window:\n    if 'Google Chrome' in i.title:\n        i.hide()\n\nor you can play with your driver title  also\n"]}, {"type": 5, "title": "Testing with a selenium driver in Java without opening any browser", "question": "\nI need to test with selenium chrome driver in Java. But chrome window should't be opened. Assume this a product and no window should be opened.\nI've also looked at this one ;\nIs it possible to hide the browser in Selenium RC?\nBut no solution for me. The testing should be operating system independent and I've tried HtmlUnitDriver for testing without opening any window but it has some problem. When there is finding components by id, it may not find the component by id. Some servers may send the component id according to browser and I can't know what id I should use to test. \nBecause of that I'm trying to use chrome driver. \nIs there a way to use chromedriver without opening chrome window or another way to test without opening any window with Selenium in Java?\nThank!\n", "answers": ["\nGo with PhantomJS but if running them in chromedriver is required and you have the resources, this blog has a good recipe on running headless selenium with chrome. Requiring you to download the following... \n\nVirtualBox\nVagrant\nNodeJS\n\nIf you plan to implement Jenkins or any other CI in the future, I strongly suggest going with PhantomJS though.\n", "\nIn selenium web driver there is headless mode. so in headless mode you can do the automation without opening the web browser. and also you can deploy your application in none gui system \n    ChromeOptions options = new ChromeOptions();\n    // setting headless mode to true.. so there isn't any ui\n    options.setHeadless(true);\n\n    // Create a new instance of the Chrome driver\n    WebDriver driver = new ChromeDriver(options);\n\n", "\nGhostDriver and PhantomJS should let you do what you want.\n", "\nI like this article.\nBasically you need to add PhantomJS dependency in pom (I like maven for dependency management):\n<dependency>\n    <groupId>com.github.detro.ghostdriver</groupId>\n    <artifactId>phantomjsdriver</artifactId>\n    <version>1.1.0</version>\n</dependency>\n\nAnd run code\n    System.setProperty( \"phantomjs.binary.path\", \"c:\\\\path\\\\to\\\\phantomjs-1.9.8-windows\\\\phantomjs.exe\" );\n    WebDriver driver = new PhantomJSDriver();\n    driver.get(\"http://www.google.com\");\n    driver.quit();\n\nIt worked for me with versions:\n\nPhantomJS 1.9.8\nPhantomJS driver 1.1.0\nSelenium 2.44.0\n\n", "\nwith Java you can use JSOUP library and then , using selenium to inspect the document.\nDocument doc = Jsoup.connect(\"PUT THE LINK\")\n                  .userAgent(\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\")\n                  .get();\n\nthen, using selenium, you could make something like : doc.getElementByClassName etc..\n"]}, {"type": 5, "title": "Read javascript code in selenium without opening browser", "question": "\nI'm working with selenium API to webcrapping on pages with javascript.\nIs there some method to get the code without a web browser screen opens ?\nI am new to this API\nIs possible?\n", "answers": ["\nYou have, at least, 3 basic options:\n\nuse a headless browser, like PhantomJS, example:\n>>> from selenium import webdriver\n>>> driver = webdriver.PhantomJS()\n>>> driver.get('http://stackoverflow.com')\n>>> driver.title\nu'Stack Overflow'\n\nuse a virtual display (see xvfb) with the help of pyvirtualdisplay, examples here:\n\nHow do I run Selenium in Xvfb?\nSelenium with pyvirtualdisplay unable to locate element\n\nuse a remote selenium server, either your own with setting up own nodes in a grid, or at, for example, BrowserStack, or Sauce Labs:\n>>> from selenium import webdriver\n>>> from selenium.webdriver.common.desired_capabilities import DesiredCapabilities\n>>> \n>>> desired_cap = {'os': 'Windows', 'os_version': 'xp', 'browser': 'IE', 'browser_version': '7.0' }\n>>> driver = webdriver.Remote(command_executor='http://username:key@hub.browserstack.com:80/wd/hub', desired_capabilities=desired_cap)\n>>> \n>>> driver.get('http://stackoverflow.com')\n>>> driver.title\nu'Stack Overflow'\n\n\n", "\nUnfortunately, you can't use JavaScript without an interpreter, which is in a browser. Though, you may use PhantomJS - a headless browser.\n", "\nYou could use headless browser.\nFor example\nhttp://phantomjs.org/ or http://slimerjs.org/\n", "\n\"Is there some method to get the code without a web browser screen opens?\"- YES! \nYou have to import Options.\nfrom selenium import webdriver   # for webdriver\nfrom selenium.webdriver.support.ui import WebDriverWait  # for implicit and explict waits\nfrom selenium.webdriver.chrome.options import Options  # for suppressing the browser\n\nThen in the code:\noption = webdriver.ChromeOptions()\noption.add_argument('headless')\ndriver = webdriver.Chrome(options=option)\n\nAnd continue with the rest of the program.\n"]}, {"type": 5, "title": "Switch to window (tab) without bringing browser to front", "question": "\nI am using Python and Selenium to navigate multiple tabs. How can I switch to a different window/tab without bringing the entire browser window to the front and without the selenium window \"stealing\" the focus of my computer? For example, if I'm typing in the search bar of a normal browser and my script switches tabs, it'll stop typing the search bar and I'll have to reclick the search bar to start typing again.\n\nNo headless mode suggestions please.\nChanging the browser location off the screen doesn't work because it still steals focus\nMinimizing the browser doesn't work because it unminimizes when the switch to command is run\n\nHere is how I'm switching windows:\n\n", "answers": ["\nThe answer is NO, this is not possible to do with Selenium.\nSelenium is created to simulate actions a user can do via GUI.\nAs a user you can't do what you are asking about, Selenium can't do it as well.\n", "\nI think, If you deploy your Automation scripts to a VM (which is there in you Machine), You can continue to start working on your local browser and Your Automation script will run on a VM and will have a independent environment for the same.\n"]}]